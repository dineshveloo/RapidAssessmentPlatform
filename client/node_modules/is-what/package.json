{
  "_args": [
    [
      {
        "raw": "is-what@^3.3.1",
        "scope": null,
        "escapedName": "is-what",
        "name": "is-what",
        "rawSpec": "^3.3.1",
        "spec": ">=3.3.1 <4.0.0",
        "type": "range"
      },
      "/Users/anu/Documents/RapidAssessmentPlatform/client/node_modules/merge-anything"
    ]
  ],
  "_from": "is-what@^3.3.1",
  "_hasShrinkwrap": false,
  "_id": "is-what@3.10.0",
  "_location": "/is-what",
  "_nodeVersion": "14.4.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/is-what_3.10.0_1593821388097_0.055809272762598505"
  },
  "_npmUser": {
    "name": "mesqueeb",
    "email": "mesqueeb@gmail.com"
  },
  "_npmVersion": "6.14.5",
  "_phantomChildren": {},
  "_requested": {
    "raw": "is-what@^3.3.1",
    "scope": null,
    "escapedName": "is-what",
    "name": "is-what",
    "rawSpec": "^3.3.1",
    "spec": ">=3.3.1 <4.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/merge-anything"
  ],
  "_resolved": "https://registry.npmjs.org/is-what/-/is-what-3.10.0.tgz",
  "_shasum": "5fee88ee7105c373c5b7c9324f345ad7e9554327",
  "_shrinkwrap": null,
  "_spec": "is-what@^3.3.1",
  "_where": "/Users/anu/Documents/RapidAssessmentPlatform/client/node_modules/merge-anything",
  "author": {
    "name": "Luca Ban - Mesqueeb"
  },
  "ava": {
    "extensions": [
      "ts"
    ],
    "require": [
      "tsconfig-paths/register",
      "ts-node/register"
    ]
  },
  "bugs": {
    "url": "https://github.com/mesqueeb/is-what/issues"
  },
  "dependencies": {},
  "description": "JS type check (TypeScript supported) functions like `isPlainObject() isArray()` etc. A simple & small integration.",
  "devDependencies": {
    "@babel/core": "^7.9.0",
    "@types/babel-core": "^6.25.6",
    "@types/jest": "^25.2.1",
    "@typescript-eslint/eslint-plugin": "^2.27.0",
    "@typescript-eslint/parser": "^2.27.0",
    "ava": "^3.6.0",
    "babel-core": "^7.0.0-bridge.0",
    "babel-jest": "^25.3.0",
    "babel-preset-env": "^1.7.0",
    "eslint": "^6.8.0",
    "eslint-config-prettier": "^6.10.1",
    "eslint-plugin-tree-shaking": "^1.8.0",
    "jest": "^25.3.0",
    "regenerator-runtime": "^0.13.5",
    "rollup": "^1.32.1",
    "rollup-plugin-typescript2": "^0.26.0",
    "ts-node": "^8.8.2",
    "tsconfig-paths": "^3.9.0",
    "typescript": "^3.8.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-U4RYCXNOmATQHlOPlOCHCfXyKEFIPqvyaKDqYRuLbD6EYKcTTfc3YXkAYjzOVxO3zt34L+Wh2feIyWrYiZ7kng==",
    "shasum": "5fee88ee7105c373c5b7c9324f345ad7e9554327",
    "tarball": "https://registry.npmjs.org/is-what/-/is-what-3.10.0.tgz",
    "fileCount": 16,
    "unpackedSize": 57447,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe/8jMCRA9TVsSAnZWagAAJPwP/26CAMaBJijkrzkHDF1y\negGlAcpktIy4RiDVnNHHJW5rtSm1UxlQQofnvIV5iOc+CBbV0/LOb0hiFQRN\n+pRG37Zsyio+i9x1HHfxt1RMTeL2XQDko6j+Ov+EMpqa99Rn0CpTLkKwaMwI\nDyDnLFzs4t9zwWcNwqLkZU6UnuHnAe/yIDKiZpEHBDlkRvrgGSLzshubYMzE\naeZNaO3aSQcGjz9AwhsVw3IL+in9dnA8Y1mwIH7z1q7NDXE+X1IU6t8tSNPQ\nmY4mr7ZjCibaOGMl3/IvGwpknZB+1vMY4roAGDTJ39sCGDtRjq4lNCXtKjy2\nNvPDP+tC3ByBKbt+hGvbLe94kWIel2BAKJl3HhwAoQseL6Kd8CzE5mWyY01E\njH1j8b9M+dYKvA66VDALiP4Oe+UolWL4ER7l6eEZD1ncNS4Ld70hY5oOBCx4\nx6ITF20HTwQHmZsERiQy8li/bjhe33Ty8+N7LvBeQnzLaLCTTrENomvdYfsI\nkPvHTOCGnICiBJ/JZblhbmcsJsqLlWmyKC6xflZyXSPV9ArEm+7CBoS82yyn\nfs0g5GTb6EC2pyIIt6mH1Mu2M9P5AH7NfaTOvvoeFg5QUTB65+dQzzV3o9R9\nTJZZYwW+GlZWzdfU3aECrPT7sq7XNaP+5/NcLYED9Wvp/MY/kxW2MEGk5mBI\nUrsR\r\n=2xvd\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "b0c0b0f828f30075133d1add79111d27ec33de82",
  "homepage": "https://github.com/mesqueeb/is-what#readme",
  "keywords": [
    "javascript",
    "typescript",
    "typechecker",
    "check-type",
    "javascript-type",
    "primitive-types",
    "plain-object",
    "plain-objects",
    "class-instance",
    "class-identifier",
    "type-checking",
    "type-checker",
    "type-check",
    "define-type",
    "get-type",
    "what-type",
    "is-object",
    "is-plain-obj",
    "is-plain-object"
  ],
  "license": "MIT",
  "main": "dist/index.cjs.js",
  "maintainers": [
    {
      "name": "mesqueeb",
      "email": "mesqueeb@gmail.com"
    }
  ],
  "module": "dist/index.esm.js",
  "name": "is-what",
  "optionalDependencies": {},
  "readme": "# is What? 🙉\n\n```\nnpm i is-what\n```\n\nVery simple &amp; small JS type check functions. It's fully TypeScript supported!\n\n## Motivation\n\nI built is-what because the existing solutions were all too complex or too poorly built.\n\nI was looking for:\n- A simple way to check any kind of type (including non-primitives)\n- Be able to check if an object is a plain object `{}` or a special object (like a class instance) ‼️\n- Let TypeScript automatically know what type a value is when checking\n\nAnd that's exactly what `is-what` is! (what a great wordplay 😃)\n\n## Usage\n\nis-what is really easy to use, and most functions work just like you'd expect.\n\n```js\n// import functions you want to use like so:\nimport { isString, isDate, isPlainObject } from 'is-what'\n```\n\n1. First I'll go over the simple functions available. Only `isNumber` and `isDate` have special treatment.\n2. After that I'll talk about working with Objects (plain objects vs class instances etc.).\n3. Lastly I'll talk about TypeScript implementation\n\n### Simple type check functions\n\n```js\n// strings\nisString('') // true\nisEmptyString('') // true\nisFullString('') // false\n\n// numbers\nisNumber(0) // true\nisNumber(NaN) // false\n\n// dates\nisDate(new Date()) // true\nisDate(new Date('invalid date')) // false\n\n// others\nisBoolean(false) // true\nisFunction(function () {}) // true\nisArray([]) // true\nisUndefined(undefined) // true\nisNull(null) // true\nisRegExp(/\\s/gi) // true\nisSymbol(Symbol()) // true\nisBlob(new Blob()) // true\nisFile(new File([''], '', { type: 'text/html' })) // true\n\n// primitives\nisPrimitive('') // true\n// true for any of: boolean, null, undefined, number, string, symbol\n```\n\n### Getting and checking for specific types\n\nYou can check for specific types with `getType` and `isType`:\n\n```js\nimport { getType, isType } from 'is-what'\n\ngetType('') // returns 'String'\n// pass a Type as second param:\nisType('', String) // returns true\n```\n\n### isPlainObject vs isAnyObject\n\nChecking for a JavaScript object can be really difficult. In JavaScript you can create classes that will behave just like JavaScript objects but might have completely different prototypes. With is-what I went for this classification:\n\n- `isPlainObject` will only return `true` on plain JavaScript objects and not on classes or others\n- `isAnyObject` will be more loose and return `true` on regular objects, classes, etc.\n\n```js\n// define a plain object\nconst plainObject = {hello: 'I am a good old object.'}\n\n// define a special object\nclass SpecialObject {\n  constructor (somethingSpecial) {\n    this.speciality = somethingSpecial\n  }\n}\nconst specialObject = new SpecialObject('I am a special object! I am a class instance!!!')\n\n// check the plain object\nisPlainObject(plainObject) // returns true\nisAnyObject(plainObject) // returns true\ngetType(plainObject) // returns 'Object'\n\n// check the special object\nisPlainObject(specialObject) // returns false !!!!!!!!!\nisAnyObject(specialObject) // returns true\ngetType(specialObject) // returns 'Object'\n```\n\n> Please note that `isPlainObject` will only return `true` for normal plain JavaScript objects.\n\n## TypeScript\n\nis-what makes TypeScript know the type during if statements. This means that a check returns the type of the payload for TypeScript users.\n\n```TypeScript\nfunction isNumber (payload: any): payload is number {\n  // return boolean\n}\n// As you can see above, all functions return a boolean for JavaScript, but pass the payload type to TypeScript.\n\n// usage example:\nfunction fn (payload: string | number): number {\n  if (isNumber(payload)) {\n    // ↑ TypeScript already knows payload is a number here!\n    return payload\n  }\n}\n```\n\n`isPlainObject` and `isAnyObject` with TypeScript will declare the payload to be an object type with any props:\n\n```TypeScript\nfunction isPlainObject (payload: any): payload is {[key: string]: any}\nfunction isAnyObject (payload: any): payload is {[key: string]: any}\n// The reason to return `{[key: string]: any}` is to be able to do\nif (isPlainObject(payload) && payload.id) return payload.id\n// if isPlainObject() would return `payload is object` then it would give an error at `payload.id`\n```\n\n### isObjectLike\n\nIf you want more control over which kind of objects are allowed you can use `isObjectLike<T>`:\n\n```TypeScript\nimport { isObjectLike } from 'is-what'\n// usage examples:\nisObjectLike<{specificKey: string}>(payload)\nisObjectLike<object>(payload)\n// you can pass a specific type for TS to check on.\n```\n\n`isObjectLike<T>` works like this under the hood:\n\n```TypeScript\nfunction isObjectLike<T extends object> (payload: any): payload is T {\n  return isAnyObject(payload)\n}\n```\n\n## Meet the family\n\n- [is-what 🙉](https://github.com/mesqueeb/is-what)\n- [merge-anything 🥡](https://github.com/mesqueeb/merge-anything)\n- [filter-anything ⚔️](https://github.com/mesqueeb/filter-anything)\n- [find-and-replace-anything 🎣](https://github.com/mesqueeb/find-and-replace-anything)\n- [compare-anything 🛰](https://github.com/mesqueeb/compare-anything)\n- [copy-anything 🎭](https://github.com/mesqueeb/copy-anything)\n- [flatten-anything 🏏](https://github.com/mesqueeb/flatten-anything)\n\n## Source code\n\nIt's litterally just these functions:\n\n```js\nfunction getType (payload) {\n  return Object.prototype.toString.call(payload).slice(8, -1)\n}\nfunction isUndefined (payload) {\n  return getType(payload) === 'Undefined'\n}\nfunction isString (payload) {\n  return getType(payload) === 'String'\n}\nfunction isAnyObject (payload) {\n  return getType(payload) === 'Object'\n}\n// etc...\n```\n\nSee the full source code [here](https://github.com/mesqueeb/is-what/blob/master/src/index.ts).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mesqueeb/is-what.git"
  },
  "scripts": {
    "ava": "ava",
    "build": "npm run lint && npm run rollup && npm run test",
    "lint": "eslint . --ext .js,.jsx,.ts,.tsx",
    "rollup": "rollup -c ./build/rollup.js",
    "test": "jest",
    "test-w": "jest --watchAll"
  },
  "sideEffects": false,
  "typings": "types/index.d.ts",
  "version": "3.10.0"
}
