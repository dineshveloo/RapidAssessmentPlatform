{"ast":null,"code":"/* eslint no-undefined: 0 */\n'use strict';\n\nconst MimeNode = require('../mime-node');\n\nconst mimeFuncs = require('../mime-funcs');\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\n\n\nclass MailComposer {\n  constructor(mail) {\n    this.mail = mail || {};\n    this.message = false;\n  }\n  /**\n   * Builds MimeNode instance\n   */\n\n\n  compile() {\n    this._alternatives = this.getAlternatives();\n    this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n    this._attachments = this.getAttachments(!!this._htmlNode);\n    this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n    this._useAlternative = this._alternatives.length > 1;\n    this._useMixed = this._attachments.attached.length > 1 || this._alternatives.length && this._attachments.attached.length === 1; // Compose MIME tree\n\n    if (this.mail.raw) {\n      this.message = new MimeNode().setRaw(this.mail.raw);\n    } else if (this._useMixed) {\n      this.message = this._createMixed();\n    } else if (this._useAlternative) {\n      this.message = this._createAlternative();\n    } else if (this._useRelated) {\n      this.message = this._createRelated();\n    } else {\n      this.message = this._createContentNode(false, [].concat(this._alternatives || []).concat(this._attachments.attached || []).shift() || {\n        contentType: 'text/plain',\n        content: ''\n      });\n    } // Add custom headers\n\n\n    if (this.mail.headers) {\n      this.message.addHeader(this.mail.headers);\n    } // Add headers to the root node, always overrides custom headers\n\n\n    ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n      let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n\n      if (this.mail[key]) {\n        this.message.setHeader(header, this.mail[key]);\n      }\n    }); // Sets custom envelope\n\n    if (this.mail.envelope) {\n      this.message.setEnvelope(this.mail.envelope);\n    } // ensure Message-Id value\n\n\n    this.message.messageId();\n    return this.message;\n  }\n  /**\n   * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n   *\n   * @param {Boolean} findRelated If true separate related attachments from attached ones\n   * @returns {Object} An object of arrays (`related` and `attached`)\n   */\n\n\n  getAttachments(findRelated) {\n    let icalEvent, eventObject;\n    let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n      let data;\n      let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n      if (/^data:/i.test(attachment.path || attachment.href)) {\n        attachment = this._processDataUrl(attachment);\n      }\n\n      data = {\n        contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n        contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n        contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n      };\n\n      if (attachment.filename) {\n        data.filename = attachment.filename;\n      } else if (!isMessageNode && attachment.filename !== false) {\n        data.filename = (attachment.path || attachment.href || '').split('/').pop().split('?').shift() || 'attachment-' + (i + 1);\n\n        if (data.filename.indexOf('.') < 0) {\n          data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n        }\n      }\n\n      if (/^https?:\\/\\//i.test(attachment.path)) {\n        attachment.href = attachment.path;\n        attachment.path = undefined;\n      }\n\n      if (attachment.cid) {\n        data.cid = attachment.cid;\n      }\n\n      if (attachment.raw) {\n        data.raw = attachment.raw;\n      } else if (attachment.path) {\n        data.content = {\n          path: attachment.path\n        };\n      } else if (attachment.href) {\n        data.content = {\n          href: attachment.href\n        };\n      } else {\n        data.content = attachment.content || '';\n      }\n\n      if (attachment.encoding) {\n        data.encoding = attachment.encoding;\n      }\n\n      if (attachment.headers) {\n        data.headers = attachment.headers;\n      }\n\n      return data;\n    });\n\n    if (this.mail.icalEvent) {\n      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n        icalEvent = this.mail.icalEvent;\n      } else {\n        icalEvent = {\n          content: this.mail.icalEvent\n        };\n      }\n\n      eventObject = {};\n      Object.keys(icalEvent).forEach(key => {\n        eventObject[key] = icalEvent[key];\n      });\n      eventObject.contentType = 'application/ics';\n\n      if (!eventObject.headers) {\n        eventObject.headers = {};\n      }\n\n      eventObject.filename = eventObject.filename || 'invite.ics';\n      eventObject.headers['Content-Disposition'] = 'attachment';\n      eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n    }\n\n    if (!findRelated) {\n      return {\n        attached: attachments.concat(eventObject || []),\n        related: []\n      };\n    } else {\n      return {\n        attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n        related: attachments.filter(attachment => !!attachment.cid)\n      };\n    }\n  }\n  /**\n   * List alternatives. Resulting objects can be used as input for MimeNode nodes\n   *\n   * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n   */\n\n\n  getAlternatives() {\n    let alternatives = [],\n        text,\n        html,\n        watchHtml,\n        icalEvent,\n        eventObject;\n\n    if (this.mail.text) {\n      if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n        text = this.mail.text;\n      } else {\n        text = {\n          content: this.mail.text\n        };\n      }\n\n      text.contentType = 'text/plain' + (!text.encoding && mimeFuncs.isPlainText(text.content) ? '' : '; charset=utf-8');\n    }\n\n    if (this.mail.watchHtml) {\n      if (typeof this.mail.watchHtml === 'object' && (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)) {\n        watchHtml = this.mail.watchHtml;\n      } else {\n        watchHtml = {\n          content: this.mail.watchHtml\n        };\n      }\n\n      watchHtml.contentType = 'text/watch-html' + (!watchHtml.encoding && mimeFuncs.isPlainText(watchHtml.content) ? '' : '; charset=utf-8');\n    } // only include the calendar alternative if there are no attachments\n    // otherwise you might end up in a blank screen on some clients\n\n\n    if (this.mail.icalEvent && !(this.mail.attachments && this.mail.attachments.length)) {\n      if (typeof this.mail.icalEvent === 'object' && (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)) {\n        icalEvent = this.mail.icalEvent;\n      } else {\n        icalEvent = {\n          content: this.mail.icalEvent\n        };\n      }\n\n      eventObject = {};\n      Object.keys(icalEvent).forEach(key => {\n        eventObject[key] = icalEvent[key];\n      });\n\n      if (eventObject.content && typeof eventObject.content === 'object') {\n        // we are going to have the same attachment twice, so mark this to be\n        // resolved just once\n        eventObject.content._resolve = true;\n      }\n\n      eventObject.filename = false;\n      eventObject.contentType = 'text/calendar; charset=\"utf-8\"; method=' + (eventObject.method || 'PUBLISH').toString().trim().toUpperCase();\n\n      if (!eventObject.headers) {\n        eventObject.headers = {};\n      }\n    }\n\n    if (this.mail.html) {\n      if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n        html = this.mail.html;\n      } else {\n        html = {\n          content: this.mail.html\n        };\n      }\n\n      html.contentType = 'text/html' + (!html.encoding && mimeFuncs.isPlainText(html.content) ? '' : '; charset=utf-8');\n    }\n\n    [].concat(text || []).concat(watchHtml || []).concat(html || []).concat(eventObject || []).concat(this.mail.alternatives || []).forEach(alternative => {\n      let data;\n\n      if (/^data:/i.test(alternative.path || alternative.href)) {\n        alternative = this._processDataUrl(alternative);\n      }\n\n      data = {\n        contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n        contentTransferEncoding: alternative.contentTransferEncoding\n      };\n\n      if (alternative.filename) {\n        data.filename = alternative.filename;\n      }\n\n      if (/^https?:\\/\\//i.test(alternative.path)) {\n        alternative.href = alternative.path;\n        alternative.path = undefined;\n      }\n\n      if (alternative.raw) {\n        data.raw = alternative.raw;\n      } else if (alternative.path) {\n        data.content = {\n          path: alternative.path\n        };\n      } else if (alternative.href) {\n        data.content = {\n          href: alternative.href\n        };\n      } else {\n        data.content = alternative.content || '';\n      }\n\n      if (alternative.encoding) {\n        data.encoding = alternative.encoding;\n      }\n\n      if (alternative.headers) {\n        data.headers = alternative.headers;\n      }\n\n      alternatives.push(data);\n    });\n    return alternatives;\n  }\n  /**\n   * Builds multipart/mixed node. It should always contain different type of elements on the same level\n   * eg. text + attachments\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createMixed(parentNode) {\n    let node;\n\n    if (!parentNode) {\n      node = new MimeNode('multipart/mixed', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    } else {\n      node = parentNode.createChild('multipart/mixed', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    }\n\n    if (this._useAlternative) {\n      this._createAlternative(node);\n    } else if (this._useRelated) {\n      this._createRelated(node);\n    }\n\n    [].concat(!this._useAlternative && this._alternatives || []).concat(this._attachments.attached || []).forEach(element => {\n      // if the element is a html node from related subpart then ignore it\n      if (!this._useRelated || element !== this._htmlNode) {\n        this._createContentNode(node, element);\n      }\n    });\n    return node;\n  }\n  /**\n   * Builds multipart/alternative node. It should always contain same type of elements on the same level\n   * eg. text + html view of the same data\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createAlternative(parentNode) {\n    let node;\n\n    if (!parentNode) {\n      node = new MimeNode('multipart/alternative', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    } else {\n      node = parentNode.createChild('multipart/alternative', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    }\n\n    this._alternatives.forEach(alternative => {\n      if (this._useRelated && this._htmlNode === alternative) {\n        this._createRelated(node);\n      } else {\n        this._createContentNode(node, alternative);\n      }\n    });\n\n    return node;\n  }\n  /**\n   * Builds multipart/related node. It should always contain html node with related attachments\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createRelated(parentNode) {\n    let node;\n\n    if (!parentNode) {\n      node = new MimeNode('multipart/related; type=\"text/html\"', {\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    } else {\n      node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    }\n\n    this._createContentNode(node, this._htmlNode);\n\n    this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n    return node;\n  }\n  /**\n   * Creates a regular node with contents\n   *\n   * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n   * @param {Object} element Node data\n   * @returns {Object} MimeNode node element\n   */\n\n\n  _createContentNode(parentNode, element) {\n    element = element || {};\n    element.content = element.content || '';\n    let node;\n    let encoding = (element.encoding || 'utf8').toString().toLowerCase().replace(/[-_\\s]/g, '');\n\n    if (!parentNode) {\n      node = new MimeNode(element.contentType, {\n        filename: element.filename,\n        baseBoundary: this.mail.baseBoundary,\n        textEncoding: this.mail.textEncoding,\n        boundaryPrefix: this.mail.boundaryPrefix,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess\n      });\n    } else {\n      node = parentNode.createChild(element.contentType, {\n        filename: element.filename,\n        disableUrlAccess: this.mail.disableUrlAccess,\n        disableFileAccess: this.mail.disableFileAccess,\n        normalizeHeaderKey: this.mail.normalizeHeaderKey\n      });\n    } // add custom headers\n\n\n    if (element.headers) {\n      node.addHeader(element.headers);\n    }\n\n    if (element.cid) {\n      node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n    }\n\n    if (element.contentTransferEncoding) {\n      node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n    } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n      node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n    }\n\n    if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n      node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n    }\n\n    if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n      element.content = Buffer.from(element.content, encoding);\n    } // prefer pregenerated raw content\n\n\n    if (element.raw) {\n      node.setRaw(element.raw);\n    } else {\n      node.setContent(element.content);\n    }\n\n    return node;\n  }\n  /**\n   * Parses data uri and converts it to a Buffer\n   *\n   * @param {Object} element Content element\n   * @return {Object} Parsed element\n   */\n\n\n  _processDataUrl(element) {\n    let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n\n    if (!parts) {\n      return element;\n    }\n\n    element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n\n    if ('path' in element) {\n      element.path = false;\n    }\n\n    if ('href' in element) {\n      element.href = false;\n    }\n\n    parts[1].split(';').forEach(item => {\n      if (/^\\w+\\/[^/]+$/i.test(item)) {\n        element.contentType = element.contentType || item.toLowerCase();\n      }\n    });\n    return element;\n  }\n\n}\n\nmodule.exports = MailComposer;","map":{"version":3,"sources":["/Users/anu/Documents/RapidAssessmentPlatform/node_modules/nodemailer/lib/mail-composer/index.js"],"names":["MimeNode","require","mimeFuncs","MailComposer","constructor","mail","message","compile","_alternatives","getAlternatives","_htmlNode","filter","alternative","test","contentType","pop","_attachments","getAttachments","_useRelated","related","length","_useAlternative","_useMixed","attached","raw","setRaw","_createMixed","_createAlternative","_createRelated","_createContentNode","concat","shift","content","headers","addHeader","forEach","header","key","replace","o","c","toUpperCase","setHeader","envelope","setEnvelope","messageId","findRelated","icalEvent","eventObject","attachments","map","attachment","i","data","isMessageNode","path","href","_processDataUrl","detectMimeType","filename","contentDisposition","contentTransferEncoding","split","indexOf","detectExtension","undefined","cid","encoding","Object","keys","alternatives","text","html","watchHtml","isPlainText","_resolve","method","toString","trim","push","parentNode","node","baseBoundary","textEncoding","boundaryPrefix","disableUrlAccess","disableFileAccess","normalizeHeaderKey","createChild","element","toLowerCase","includes","Buffer","from","setContent","parts","match","decodeURIComponent","item","module","exports"],"mappings":"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","sourcesContent":["/* eslint no-undefined: 0 */\n\n'use strict';\n\nconst MimeNode = require('../mime-node');\nconst mimeFuncs = require('../mime-funcs');\n\n/**\n * Creates the object for composing a MimeNode instance out from the mail options\n *\n * @constructor\n * @param {Object} mail Mail options\n */\nclass MailComposer {\n    constructor(mail) {\n        this.mail = mail || {};\n        this.message = false;\n    }\n\n    /**\n     * Builds MimeNode instance\n     */\n    compile() {\n        this._alternatives = this.getAlternatives();\n        this._htmlNode = this._alternatives.filter(alternative => /^text\\/html\\b/i.test(alternative.contentType)).pop();\n        this._attachments = this.getAttachments(!!this._htmlNode);\n\n        this._useRelated = !!(this._htmlNode && this._attachments.related.length);\n        this._useAlternative = this._alternatives.length > 1;\n        this._useMixed = this._attachments.attached.length > 1 || (this._alternatives.length && this._attachments.attached.length === 1);\n\n        // Compose MIME tree\n        if (this.mail.raw) {\n            this.message = new MimeNode().setRaw(this.mail.raw);\n        } else if (this._useMixed) {\n            this.message = this._createMixed();\n        } else if (this._useAlternative) {\n            this.message = this._createAlternative();\n        } else if (this._useRelated) {\n            this.message = this._createRelated();\n        } else {\n            this.message = this._createContentNode(\n                false,\n                []\n                    .concat(this._alternatives || [])\n                    .concat(this._attachments.attached || [])\n                    .shift() || {\n                    contentType: 'text/plain',\n                    content: ''\n                }\n            );\n        }\n\n        // Add custom headers\n        if (this.mail.headers) {\n            this.message.addHeader(this.mail.headers);\n        }\n\n        // Add headers to the root node, always overrides custom headers\n        ['from', 'sender', 'to', 'cc', 'bcc', 'reply-to', 'in-reply-to', 'references', 'subject', 'message-id', 'date'].forEach(header => {\n            let key = header.replace(/-(\\w)/g, (o, c) => c.toUpperCase());\n            if (this.mail[key]) {\n                this.message.setHeader(header, this.mail[key]);\n            }\n        });\n\n        // Sets custom envelope\n        if (this.mail.envelope) {\n            this.message.setEnvelope(this.mail.envelope);\n        }\n\n        // ensure Message-Id value\n        this.message.messageId();\n\n        return this.message;\n    }\n\n    /**\n     * List all attachments. Resulting attachment objects can be used as input for MimeNode nodes\n     *\n     * @param {Boolean} findRelated If true separate related attachments from attached ones\n     * @returns {Object} An object of arrays (`related` and `attached`)\n     */\n    getAttachments(findRelated) {\n        let icalEvent, eventObject;\n        let attachments = [].concat(this.mail.attachments || []).map((attachment, i) => {\n            let data;\n            let isMessageNode = /^message\\//i.test(attachment.contentType);\n\n            if (/^data:/i.test(attachment.path || attachment.href)) {\n                attachment = this._processDataUrl(attachment);\n            }\n\n            data = {\n                contentType: attachment.contentType || mimeFuncs.detectMimeType(attachment.filename || attachment.path || attachment.href || 'bin'),\n                contentDisposition: attachment.contentDisposition || (isMessageNode ? 'inline' : 'attachment'),\n                contentTransferEncoding: 'contentTransferEncoding' in attachment ? attachment.contentTransferEncoding : 'base64'\n            };\n\n            if (attachment.filename) {\n                data.filename = attachment.filename;\n            } else if (!isMessageNode && attachment.filename !== false) {\n                data.filename =\n                    (attachment.path || attachment.href || '')\n                        .split('/')\n                        .pop()\n                        .split('?')\n                        .shift() || 'attachment-' + (i + 1);\n                if (data.filename.indexOf('.') < 0) {\n                    data.filename += '.' + mimeFuncs.detectExtension(data.contentType);\n                }\n            }\n\n            if (/^https?:\\/\\//i.test(attachment.path)) {\n                attachment.href = attachment.path;\n                attachment.path = undefined;\n            }\n\n            if (attachment.cid) {\n                data.cid = attachment.cid;\n            }\n\n            if (attachment.raw) {\n                data.raw = attachment.raw;\n            } else if (attachment.path) {\n                data.content = {\n                    path: attachment.path\n                };\n            } else if (attachment.href) {\n                data.content = {\n                    href: attachment.href\n                };\n            } else {\n                data.content = attachment.content || '';\n            }\n\n            if (attachment.encoding) {\n                data.encoding = attachment.encoding;\n            }\n\n            if (attachment.headers) {\n                data.headers = attachment.headers;\n            }\n\n            return data;\n        });\n\n        if (this.mail.icalEvent) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            eventObject.contentType = 'application/ics';\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n            eventObject.filename = eventObject.filename || 'invite.ics';\n            eventObject.headers['Content-Disposition'] = 'attachment';\n            eventObject.headers['Content-Transfer-Encoding'] = 'base64';\n        }\n\n        if (!findRelated) {\n            return {\n                attached: attachments.concat(eventObject || []),\n                related: []\n            };\n        } else {\n            return {\n                attached: attachments.filter(attachment => !attachment.cid).concat(eventObject || []),\n                related: attachments.filter(attachment => !!attachment.cid)\n            };\n        }\n    }\n\n    /**\n     * List alternatives. Resulting objects can be used as input for MimeNode nodes\n     *\n     * @returns {Array} An array of alternative elements. Includes the `text` and `html` values as well\n     */\n    getAlternatives() {\n        let alternatives = [],\n            text,\n            html,\n            watchHtml,\n            icalEvent,\n            eventObject;\n\n        if (this.mail.text) {\n            if (typeof this.mail.text === 'object' && (this.mail.text.content || this.mail.text.path || this.mail.text.href || this.mail.text.raw)) {\n                text = this.mail.text;\n            } else {\n                text = {\n                    content: this.mail.text\n                };\n            }\n            text.contentType = 'text/plain' + (!text.encoding && mimeFuncs.isPlainText(text.content) ? '' : '; charset=utf-8');\n        }\n\n        if (this.mail.watchHtml) {\n            if (\n                typeof this.mail.watchHtml === 'object' &&\n                (this.mail.watchHtml.content || this.mail.watchHtml.path || this.mail.watchHtml.href || this.mail.watchHtml.raw)\n            ) {\n                watchHtml = this.mail.watchHtml;\n            } else {\n                watchHtml = {\n                    content: this.mail.watchHtml\n                };\n            }\n            watchHtml.contentType = 'text/watch-html' + (!watchHtml.encoding && mimeFuncs.isPlainText(watchHtml.content) ? '' : '; charset=utf-8');\n        }\n\n        // only include the calendar alternative if there are no attachments\n        // otherwise you might end up in a blank screen on some clients\n        if (this.mail.icalEvent && !(this.mail.attachments && this.mail.attachments.length)) {\n            if (\n                typeof this.mail.icalEvent === 'object' &&\n                (this.mail.icalEvent.content || this.mail.icalEvent.path || this.mail.icalEvent.href || this.mail.icalEvent.raw)\n            ) {\n                icalEvent = this.mail.icalEvent;\n            } else {\n                icalEvent = {\n                    content: this.mail.icalEvent\n                };\n            }\n\n            eventObject = {};\n            Object.keys(icalEvent).forEach(key => {\n                eventObject[key] = icalEvent[key];\n            });\n\n            if (eventObject.content && typeof eventObject.content === 'object') {\n                // we are going to have the same attachment twice, so mark this to be\n                // resolved just once\n                eventObject.content._resolve = true;\n            }\n\n            eventObject.filename = false;\n            eventObject.contentType =\n                'text/calendar; charset=\"utf-8\"; method=' +\n                (eventObject.method || 'PUBLISH')\n                    .toString()\n                    .trim()\n                    .toUpperCase();\n            if (!eventObject.headers) {\n                eventObject.headers = {};\n            }\n        }\n\n        if (this.mail.html) {\n            if (typeof this.mail.html === 'object' && (this.mail.html.content || this.mail.html.path || this.mail.html.href || this.mail.html.raw)) {\n                html = this.mail.html;\n            } else {\n                html = {\n                    content: this.mail.html\n                };\n            }\n            html.contentType = 'text/html' + (!html.encoding && mimeFuncs.isPlainText(html.content) ? '' : '; charset=utf-8');\n        }\n\n        []\n            .concat(text || [])\n            .concat(watchHtml || [])\n            .concat(html || [])\n            .concat(eventObject || [])\n            .concat(this.mail.alternatives || [])\n            .forEach(alternative => {\n                let data;\n\n                if (/^data:/i.test(alternative.path || alternative.href)) {\n                    alternative = this._processDataUrl(alternative);\n                }\n\n                data = {\n                    contentType: alternative.contentType || mimeFuncs.detectMimeType(alternative.filename || alternative.path || alternative.href || 'txt'),\n                    contentTransferEncoding: alternative.contentTransferEncoding\n                };\n\n                if (alternative.filename) {\n                    data.filename = alternative.filename;\n                }\n\n                if (/^https?:\\/\\//i.test(alternative.path)) {\n                    alternative.href = alternative.path;\n                    alternative.path = undefined;\n                }\n\n                if (alternative.raw) {\n                    data.raw = alternative.raw;\n                } else if (alternative.path) {\n                    data.content = {\n                        path: alternative.path\n                    };\n                } else if (alternative.href) {\n                    data.content = {\n                        href: alternative.href\n                    };\n                } else {\n                    data.content = alternative.content || '';\n                }\n\n                if (alternative.encoding) {\n                    data.encoding = alternative.encoding;\n                }\n\n                if (alternative.headers) {\n                    data.headers = alternative.headers;\n                }\n\n                alternatives.push(data);\n            });\n\n        return alternatives;\n    }\n\n    /**\n     * Builds multipart/mixed node. It should always contain different type of elements on the same level\n     * eg. text + attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createMixed(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/mixed', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        } else {\n            node = parentNode.createChild('multipart/mixed', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        }\n\n        if (this._useAlternative) {\n            this._createAlternative(node);\n        } else if (this._useRelated) {\n            this._createRelated(node);\n        }\n\n        []\n            .concat((!this._useAlternative && this._alternatives) || [])\n            .concat(this._attachments.attached || [])\n            .forEach(element => {\n                // if the element is a html node from related subpart then ignore it\n                if (!this._useRelated || element !== this._htmlNode) {\n                    this._createContentNode(node, element);\n                }\n            });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/alternative node. It should always contain same type of elements on the same level\n     * eg. text + html view of the same data\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createAlternative(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/alternative', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        } else {\n            node = parentNode.createChild('multipart/alternative', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        }\n\n        this._alternatives.forEach(alternative => {\n            if (this._useRelated && this._htmlNode === alternative) {\n                this._createRelated(node);\n            } else {\n                this._createContentNode(node, alternative);\n            }\n        });\n\n        return node;\n    }\n\n    /**\n     * Builds multipart/related node. It should always contain html node with related attachments\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @returns {Object} MimeNode node element\n     */\n    _createRelated(parentNode) {\n        let node;\n\n        if (!parentNode) {\n            node = new MimeNode('multipart/related; type=\"text/html\"', {\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        } else {\n            node = parentNode.createChild('multipart/related; type=\"text/html\"', {\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        }\n\n        this._createContentNode(node, this._htmlNode);\n\n        this._attachments.related.forEach(alternative => this._createContentNode(node, alternative));\n\n        return node;\n    }\n\n    /**\n     * Creates a regular node with contents\n     *\n     * @param {Object} parentNode Parent for this note. If it does not exist, a root node is created\n     * @param {Object} element Node data\n     * @returns {Object} MimeNode node element\n     */\n    _createContentNode(parentNode, element) {\n        element = element || {};\n        element.content = element.content || '';\n\n        let node;\n        let encoding = (element.encoding || 'utf8')\n            .toString()\n            .toLowerCase()\n            .replace(/[-_\\s]/g, '');\n\n        if (!parentNode) {\n            node = new MimeNode(element.contentType, {\n                filename: element.filename,\n                baseBoundary: this.mail.baseBoundary,\n                textEncoding: this.mail.textEncoding,\n                boundaryPrefix: this.mail.boundaryPrefix,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess\n            });\n        } else {\n            node = parentNode.createChild(element.contentType, {\n                filename: element.filename,\n                disableUrlAccess: this.mail.disableUrlAccess,\n                disableFileAccess: this.mail.disableFileAccess,\n                normalizeHeaderKey: this.mail.normalizeHeaderKey\n            });\n        }\n\n        // add custom headers\n        if (element.headers) {\n            node.addHeader(element.headers);\n        }\n\n        if (element.cid) {\n            node.setHeader('Content-Id', '<' + element.cid.replace(/[<>]/g, '') + '>');\n        }\n\n        if (element.contentTransferEncoding) {\n            node.setHeader('Content-Transfer-Encoding', element.contentTransferEncoding);\n        } else if (this.mail.encoding && /^text\\//i.test(element.contentType)) {\n            node.setHeader('Content-Transfer-Encoding', this.mail.encoding);\n        }\n\n        if (!/^text\\//i.test(element.contentType) || element.contentDisposition) {\n            node.setHeader('Content-Disposition', element.contentDisposition || (element.cid ? 'inline' : 'attachment'));\n        }\n\n        if (typeof element.content === 'string' && !['utf8', 'usascii', 'ascii'].includes(encoding)) {\n            element.content = Buffer.from(element.content, encoding);\n        }\n\n        // prefer pregenerated raw content\n        if (element.raw) {\n            node.setRaw(element.raw);\n        } else {\n            node.setContent(element.content);\n        }\n\n        return node;\n    }\n\n    /**\n     * Parses data uri and converts it to a Buffer\n     *\n     * @param {Object} element Content element\n     * @return {Object} Parsed element\n     */\n    _processDataUrl(element) {\n        let parts = (element.path || element.href).match(/^data:((?:[^;]*;)*(?:[^,]*)),(.*)$/i);\n        if (!parts) {\n            return element;\n        }\n\n        element.content = /\\bbase64$/i.test(parts[1]) ? Buffer.from(parts[2], 'base64') : Buffer.from(decodeURIComponent(parts[2]));\n\n        if ('path' in element) {\n            element.path = false;\n        }\n\n        if ('href' in element) {\n            element.href = false;\n        }\n\n        parts[1].split(';').forEach(item => {\n            if (/^\\w+\\/[^/]+$/i.test(item)) {\n                element.contentType = element.contentType || item.toLowerCase();\n            }\n        });\n\n        return element;\n    }\n}\n\nmodule.exports = MailComposer;\n"]},"metadata":{},"sourceType":"script"}