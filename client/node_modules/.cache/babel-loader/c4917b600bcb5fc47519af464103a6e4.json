{"ast":null,"code":"const JwtStrategy = require(\"passport-jwt\").Strategy;\n\nconst ExtractJwt = require(\"passport-jwt\").ExtractJwt;\n\nconst mongoose = require(\"mongoose\");\n\nconst User = mongoose.model(\"users\");\n\nconst keys = require(\"../config/keys\");\n\nconst opts = {};\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = keys.secretOrKey;\n\nmodule.exports = passport => {\n  passport.use(new JwtStrategy(opts, (jwt_payload, done) => {\n    User.findById(jwt_payload.id).then(user => {\n      if (user) {\n        return done(null, user);\n      }\n\n      return done(null, false);\n    }).catch(err => console.log(err));\n  }));\n};","map":{"version":3,"sources":["/Users/anu/Documents/RapidAssessmentPlatform/config/passport.js"],"names":["JwtStrategy","require","Strategy","ExtractJwt","mongoose","User","model","keys","opts","jwtFromRequest","fromAuthHeaderAsBearerToken","secretOrKey","module","exports","passport","use","jwt_payload","done","findById","id","then","user","catch","err","console","log"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAP,CAAwBC,QAA5C;;AACA,MAAMC,UAAU,GAAGF,OAAO,CAAC,cAAD,CAAP,CAAwBE,UAA3C;;AACA,MAAMC,QAAQ,GAAGH,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMI,IAAI,GAAGD,QAAQ,CAACE,KAAT,CAAe,OAAf,CAAb;;AACA,MAAMC,IAAI,GAAGN,OAAO,CAAC,gBAAD,CAApB;;AAEA,MAAMO,IAAI,GAAG,EAAb;AACAA,IAAI,CAACC,cAAL,GAAsBN,UAAU,CAACO,2BAAX,EAAtB;AACAF,IAAI,CAACG,WAAL,GAAmBJ,IAAI,CAACI,WAAxB;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,QAAQ,IAAI;AAC3BA,EAAAA,QAAQ,CAACC,GAAT,CACE,IAAIf,WAAJ,CAAgBQ,IAAhB,EAAsB,CAACQ,WAAD,EAAcC,IAAd,KAAuB;AAC3CZ,IAAAA,IAAI,CAACa,QAAL,CAAcF,WAAW,CAACG,EAA1B,EACGC,IADH,CACQC,IAAI,IAAI;AACZ,UAAIA,IAAJ,EAAU;AACR,eAAOJ,IAAI,CAAC,IAAD,EAAOI,IAAP,CAAX;AACD;;AACD,aAAOJ,IAAI,CAAC,IAAD,EAAO,KAAP,CAAX;AACD,KANH,EAOGK,KAPH,CAOSC,GAAG,IAAIC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAPhB;AAQD,GATD,CADF;AAYD,CAbD","sourcesContent":["const JwtStrategy = require(\"passport-jwt\").Strategy;\nconst ExtractJwt = require(\"passport-jwt\").ExtractJwt;\nconst mongoose = require(\"mongoose\");\nconst User = mongoose.model(\"users\");\nconst keys = require(\"../config/keys\");\n\nconst opts = {};\nopts.jwtFromRequest = ExtractJwt.fromAuthHeaderAsBearerToken();\nopts.secretOrKey = keys.secretOrKey;\n\nmodule.exports = passport => {\n  passport.use(\n    new JwtStrategy(opts, (jwt_payload, done) => {\n      User.findById(jwt_payload.id)\n        .then(user => {\n          if (user) {\n            return done(null, user);\n          }\n          return done(null, false);\n        })\n        .catch(err => console.log(err));\n    })\n  );\n};\n"]},"metadata":{},"sourceType":"script"}