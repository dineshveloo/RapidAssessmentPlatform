{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const RegisterUser = (userData, history) => dispatch => {\n  axios.postapi / us(\"/ers/register\", userData).then(res => history.push(\"/signin\")).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/signin\", userData).then(res => {\n    console.log(res); // Save to localStorage\n\n    if (res.data.status === 0) {\n      toast(res.data.msg);\n    } // Set token to localStorage\n\n\n    const token = res.data.token;\n    localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n    setAuthToken(token); // Decode token to get user data\n\n    const decoded = jwt_decode(token); // Set current user\n\n    dispatch(setCurrentUser(decoded));\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/anu/Documents/RapidAssessmentPlatform/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","ToastContainer","toast","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","RegisterUser","userData","history","dispatch","postapi","us","then","res","push","catch","err","type","payload","response","data","loginUser","post","console","log","status","msg","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,cAAT,EAAyBC,KAAzB,QAAsC,gBAAtC;AACA,OAAO,uCAAP;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CAEA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DX,EAAAA,KAAK,CACFY,OADH,GACWC,EAAE,CAAC,eAAD,EAAkBJ,QAAlB,CAAF,CACRK,IADQ,CACHC,GAAG,IAAIL,OAAO,CAACM,IAAR,CAAa,SAAb,CADJ,EAERC,KAFQ,CAEFC,GAAG,IACRP,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CAHD,CADX;AASD,CAVM,C,CAYP;;AACA,OAAO,MAAMC,SAAS,GAAGd,QAAQ,IAAIE,QAAQ,IAAI;AAC/CX,EAAAA,KAAK,CACFwB,IADH,CACQ,mBADR,EAC6Bf,QAD7B,EAEGK,IAFH,CAEQC,GAAG,IAAI;AACXU,IAAAA,OAAO,CAACC,GAAR,CAAYX,GAAZ,EADW,CAEX;;AACA,QAAIA,GAAG,CAACO,IAAJ,CAASK,MAAT,KAAoB,CAAxB,EAA2B;AAEzBvB,MAAAA,KAAK,CAACW,GAAG,CAACO,IAAJ,CAASM,GAAV,CAAL;AACD,KANU,CAOX;;;AAPW,UAQHC,KARG,GAQOd,GAAG,CAACO,IARX,CAQHO,KARG;AASXC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EATW,CAUX;;AACA5B,IAAAA,YAAY,CAAC4B,KAAD,CAAZ,CAXW,CAYX;;AACA,UAAMG,OAAO,GAAG9B,UAAU,CAAC2B,KAAD,CAA1B,CAbW,CAcX;;AACAlB,IAAAA,QAAQ,CAACsB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD,GAlBH,EAmBGf,KAnBH,CAmBSC,GAAG,IACRP,QAAQ,CAAC;AACPQ,IAAAA,IAAI,EAAEd,UADC;AAEPe,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaC;AAFf,GAAD,CApBZ;AAyBD,CA1BM,C,CA4BP;;AACA,OAAO,MAAMW,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLb,IAAAA,IAAI,EAAEb,gBADD;AAELc,IAAAA,OAAO,EAAEY;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLf,IAAAA,IAAI,EAAEZ;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAM4B,UAAU,GAAG,MAAMxB,QAAQ,IAAI;AAC1C;AACAmB,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACAnC,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAU,EAAAA,QAAQ,CAACsB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n\n// Register User\nexport const RegisterUser = (userData, history) => dispatch => {\n  axios\n    .postapi/us(\"/ers/register\", userData)\n    .then(res => history.push(\"/signin\"))\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/signin\", userData)\n    .then(res => {\n      console.log(res);\n      // Save to localStorage\n      if (res.data.status === 0) {\n        \n        toast(res.data.msg);\n      }\n      // Set token to localStorage\n      const { token } = res.data;\n      localStorage.setItem(\"jwtToken\", token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}