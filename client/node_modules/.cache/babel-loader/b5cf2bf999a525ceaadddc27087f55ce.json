{"ast":null,"code":"const Validator = require(\"validator\");\n\nconst isEmpty = require(\"is-empty\");\n\nmodule.exports = function validateRegisterInput(data) {\n  let errors = {}; // Convert empty fields to an empty string so we can use validator functions\n\n  data.name = !isEmpty(data.name) ? data.name : \"\";\n  data.email = !isEmpty(data.email) ? data.email : \"\";\n  data.password = !isEmpty(data.password) ? data.password : \"\";\n  data.password2 = !isEmpty(data.password2) ? data.password2 : \"\"; // Name checks\n\n  if (Validator.isEmpty(data.name)) {\n    errors.name = \"Name field is required\";\n  } // Email checks\n\n\n  if (Validator.isEmpty(data.email)) {\n    errors.email = \"Email field is required\";\n  } else if (!Validator.isEmail(data.email)) {\n    errors.email = \"Email is invalid\";\n  } // Password checks\n\n\n  if (Validator.isEmpty(data.password)) {\n    errors.password = \"Password field is required\";\n  }\n\n  if (Validator.isEmpty(data.password2)) {\n    errors.password2 = \"Confirm password field is required\";\n  }\n\n  if (!Validator.isLength(data.password, {\n    min: 6,\n    max: 30\n  })) {\n    errors.password = \"Password must be at least 6 characters\";\n  }\n\n  if (!Validator.equals(data.password, data.password2)) {\n    errors.password2 = \"Passwords must match\";\n  }\n\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};","map":{"version":3,"sources":["/Users/anu/Documents/RapidAssessmentPlatform/validation/register.js"],"names":["Validator","require","isEmpty","module","exports","validateRegisterInput","data","errors","name","email","password","password2","isEmail","isLength","min","max","equals","isValid"],"mappings":"AAAA,MAAMA,SAAS,GAAGC,OAAO,CAAC,WAAD,CAAzB;;AACA,MAAMC,OAAO,GAAGD,OAAO,CAAC,UAAD,CAAvB;;AAEAE,MAAM,CAACC,OAAP,GAAiB,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACpD,MAAIC,MAAM,GAAG,EAAb,CADoD,CAGpD;;AACAD,EAAAA,IAAI,CAACE,IAAL,GAAY,CAACN,OAAO,CAACI,IAAI,CAACE,IAAN,CAAR,GAAsBF,IAAI,CAACE,IAA3B,GAAkC,EAA9C;AACAF,EAAAA,IAAI,CAACG,KAAL,GAAa,CAACP,OAAO,CAACI,IAAI,CAACG,KAAN,CAAR,GAAuBH,IAAI,CAACG,KAA5B,GAAoC,EAAjD;AACAH,EAAAA,IAAI,CAACI,QAAL,GAAgB,CAACR,OAAO,CAACI,IAAI,CAACI,QAAN,CAAR,GAA0BJ,IAAI,CAACI,QAA/B,GAA0C,EAA1D;AACAJ,EAAAA,IAAI,CAACK,SAAL,GAAiB,CAACT,OAAO,CAACI,IAAI,CAACK,SAAN,CAAR,GAA2BL,IAAI,CAACK,SAAhC,GAA4C,EAA7D,CAPoD,CASpD;;AACA,MAAIX,SAAS,CAACE,OAAV,CAAkBI,IAAI,CAACE,IAAvB,CAAJ,EAAkC;AAChCD,IAAAA,MAAM,CAACC,IAAP,GAAc,wBAAd;AACD,GAZmD,CAcpD;;;AACA,MAAIR,SAAS,CAACE,OAAV,CAAkBI,IAAI,CAACG,KAAvB,CAAJ,EAAmC;AACjCF,IAAAA,MAAM,CAACE,KAAP,GAAe,yBAAf;AACD,GAFD,MAEO,IAAI,CAACT,SAAS,CAACY,OAAV,CAAkBN,IAAI,CAACG,KAAvB,CAAL,EAAoC;AACzCF,IAAAA,MAAM,CAACE,KAAP,GAAe,kBAAf;AACD,GAnBmD,CAqBpD;;;AACA,MAAIT,SAAS,CAACE,OAAV,CAAkBI,IAAI,CAACI,QAAvB,CAAJ,EAAsC;AACpCH,IAAAA,MAAM,CAACG,QAAP,GAAkB,4BAAlB;AACD;;AAED,MAAIV,SAAS,CAACE,OAAV,CAAkBI,IAAI,CAACK,SAAvB,CAAJ,EAAuC;AACrCJ,IAAAA,MAAM,CAACI,SAAP,GAAmB,oCAAnB;AACD;;AAED,MAAI,CAACX,SAAS,CAACa,QAAV,CAAmBP,IAAI,CAACI,QAAxB,EAAkC;AAAEI,IAAAA,GAAG,EAAE,CAAP;AAAUC,IAAAA,GAAG,EAAE;AAAf,GAAlC,CAAL,EAA6D;AAC3DR,IAAAA,MAAM,CAACG,QAAP,GAAkB,wCAAlB;AACD;;AAED,MAAI,CAACV,SAAS,CAACgB,MAAV,CAAiBV,IAAI,CAACI,QAAtB,EAAgCJ,IAAI,CAACK,SAArC,CAAL,EAAsD;AACpDJ,IAAAA,MAAM,CAACI,SAAP,GAAmB,sBAAnB;AACD;;AAED,SAAO;AACLJ,IAAAA,MADK;AAELU,IAAAA,OAAO,EAAEf,OAAO,CAACK,MAAD;AAFX,GAAP;AAID,CA1CD","sourcesContent":["const Validator = require(\"validator\");\nconst isEmpty = require(\"is-empty\");\n\nmodule.exports = function validateRegisterInput(data) {\n  let errors = {};\n\n  // Convert empty fields to an empty string so we can use validator functions\n  data.name = !isEmpty(data.name) ? data.name : \"\";\n  data.email = !isEmpty(data.email) ? data.email : \"\";\n  data.password = !isEmpty(data.password) ? data.password : \"\";\n  data.password2 = !isEmpty(data.password2) ? data.password2 : \"\";\n\n  // Name checks\n  if (Validator.isEmpty(data.name)) {\n    errors.name = \"Name field is required\";\n  }\n\n  // Email checks\n  if (Validator.isEmpty(data.email)) {\n    errors.email = \"Email field is required\";\n  } else if (!Validator.isEmail(data.email)) {\n    errors.email = \"Email is invalid\";\n  }\n\n  // Password checks\n  if (Validator.isEmpty(data.password)) {\n    errors.password = \"Password field is required\";\n  }\n\n  if (Validator.isEmpty(data.password2)) {\n    errors.password2 = \"Confirm password field is required\";\n  }\n\n  if (!Validator.isLength(data.password, { min: 6, max: 30 })) {\n    errors.password = \"Password must be at least 6 characters\";\n  }\n\n  if (!Validator.equals(data.password, data.password2)) {\n    errors.password2 = \"Passwords must match\";\n  }\n\n  return {\n    errors,\n    isValid: isEmpty(errors)\n  };\n};\n"]},"metadata":{},"sourceType":"script"}