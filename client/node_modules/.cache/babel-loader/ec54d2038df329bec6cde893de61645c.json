{"ast":null,"code":"import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\"; // Register User\n\nexport const RegisterUser = (userData, history) => dispatch => {\n  axios.post(\"/api/users/register\", userData).then(res => {\n    if (res.data.status === 1) {\n      history.push(\"/signin\");\n    } else if (res.data.status === 0) {\n      oas;\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Login - get user token\n\nexport const loginUser = userData => dispatch => {\n  axios.post(\"/api/users/signin\", userData).then(res => {\n    //console.log(res);\n    // Save to localStorage\n    if (res.data.status === 0) {\n      toast(res.data.msg);\n    } else {\n      // Set token to localStorage\n      const token = res.data.token;\n      localStorage.setItem(\"jwtToken\", token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      const decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }\n  }).catch(err => dispatch({\n    type: GET_ERRORS,\n    payload: err.response.data\n  }));\n}; // Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n}; // User loading\n\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n}; // Log user out\n\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\"); // Remove auth header for future requests\n\n  setAuthToken(false); // Set current user to empty object {} which will set isAuthenticated to false\n\n  dispatch(setCurrentUser({}));\n};","map":{"version":3,"sources":["/Users/anu/Documents/RapidAssessmentPlatform/client/src/actions/authActions.js"],"names":["axios","setAuthToken","jwt_decode","toast","GET_ERRORS","SET_CURRENT_USER","USER_LOADING","RegisterUser","userData","history","dispatch","post","then","res","data","status","push","oas","catch","err","type","payload","response","loginUser","msg","token","localStorage","setItem","decoded","setCurrentUser","setUserLoading","logoutUser","removeItem"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,uBAAzB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,OAAO,uCAAP;AACA,SAASC,UAAT,EAAqBC,gBAArB,EAAuCC,YAAvC,QAA2D,SAA3D,C,CACA;;AACA,OAAO,MAAMC,YAAY,GAAG,CAACC,QAAD,EAAWC,OAAX,KAAuBC,QAAQ,IAAI;AAC7DV,EAAAA,KAAK,CACFW,IADH,CACQ,qBADR,EAC+BH,QAD/B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX,QAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAxB,EAA2B;AACzBN,MAAAA,OAAO,CAACO,IAAR,CAAa,SAAb;AACD,KAFD,MAEO,IAAIH,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAxB,EAA2B;AACxCE,MAAAA,GAAG;AACI;AACF,GARH,EASGC,KATH,CASSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEhB,UADC;AAEPiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaR;AAFf,GAAD,CAVZ;AAeD,CAhBM,C,CAkBP;;AACA,OAAO,MAAMS,SAAS,GAAGf,QAAQ,IAAIE,QAAQ,IAAI;AAC/CV,EAAAA,KAAK,CACFW,IADH,CACQ,mBADR,EAC6BH,QAD7B,EAEGI,IAFH,CAEQC,GAAG,IAAI;AACX;AACA;AACA,QAAIA,GAAG,CAACC,IAAJ,CAASC,MAAT,KAAoB,CAAxB,EAA2B;AACzBZ,MAAAA,KAAK,CAACU,GAAG,CAACC,IAAJ,CAASU,GAAV,CAAL;AACD,KAFD,MAEO;AACL;AADK,YAEGC,KAFH,GAEaZ,GAAG,CAACC,IAFjB,CAEGW,KAFH;AAGLC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCF,KAAjC,EAHK,CAIL;;AACAxB,MAAAA,YAAY,CAACwB,KAAD,CAAZ,CALK,CAML;;AACA,YAAMG,OAAO,GAAG1B,UAAU,CAACuB,KAAD,CAA1B,CAPK,CAQL;;AACAf,MAAAA,QAAQ,CAACmB,cAAc,CAACD,OAAD,CAAf,CAAR;AACD;AACF,GAlBH,EAmBGV,KAnBH,CAmBSC,GAAG,IACRT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEhB,UADC;AAEPiB,IAAAA,OAAO,EAAEF,GAAG,CAACG,QAAJ,CAAaR;AAFf,GAAD,CApBZ;AAyBD,CA1BM,C,CA4BP;;AACA,OAAO,MAAMe,cAAc,GAAGD,OAAO,IAAI;AACvC,SAAO;AACLR,IAAAA,IAAI,EAAEf,gBADD;AAELgB,IAAAA,OAAO,EAAEO;AAFJ,GAAP;AAID,CALM,C,CAOP;;AACA,OAAO,MAAME,cAAc,GAAG,MAAM;AAClC,SAAO;AACLV,IAAAA,IAAI,EAAEd;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMyB,UAAU,GAAG,MAAMrB,QAAQ,IAAI;AAC1C;AACAgB,EAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB,EAF0C,CAG1C;;AACA/B,EAAAA,YAAY,CAAC,KAAD,CAAZ,CAJ0C,CAK1C;;AACAS,EAAAA,QAAQ,CAACmB,cAAc,CAAC,EAAD,CAAf,CAAR;AACD,CAPM","sourcesContent":["import axios from \"axios\";\nimport setAuthToken from \"../utils/setAuthToken\";\nimport jwt_decode from \"jwt-decode\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { GET_ERRORS, SET_CURRENT_USER, USER_LOADING } from \"./types\";\n// Register User\nexport const RegisterUser = (userData, history) => dispatch => {\n  axios\n    .post(\"/api/users/register\", userData)\n    .then(res => {\n      if (res.data.status === 1) {\n        history.push(\"/signin\")\n      } else if (res.data.status === 0) {\noas\n      }\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Login - get user token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post(\"/api/users/signin\", userData)\n    .then(res => {\n      //console.log(res);\n      // Save to localStorage\n      if (res.data.status === 0) {\n        toast(res.data.msg);\n      } else {\n        // Set token to localStorage\n        const { token } = res.data;\n        localStorage.setItem(\"jwtToken\", token);\n        // Set token to Auth header\n        setAuthToken(token);\n        // Decode token to get user data\n        const decoded = jwt_decode(token);\n        // Set current user\n        dispatch(setCurrentUser(decoded));\n      }\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// User loading\nexport const setUserLoading = () => {\n  return {\n    type: USER_LOADING\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from local storage\n  localStorage.removeItem(\"jwtToken\");\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to empty object {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};\n"]},"metadata":{},"sourceType":"module"}