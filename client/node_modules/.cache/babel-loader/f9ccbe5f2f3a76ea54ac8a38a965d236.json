{"ast":null,"code":"const express = require(\"express\");\n\nconst router = express.Router();\n\nconst bcrypt = require(\"bcryptjs\");\n\nconst jwt = require(\"jsonwebtoken\");\n\nconst keys = require(\"../../config/keys\");\n\nconst passport = require(\"passport\");\n\nconst msgs = require('../../email/email.msgs');\n\nconst sendEmail = require('../../email/email.send');\n\nconst userEmail = require('../../email/email.user'); // Load input validation\n\n\nconst validateRegisterInput = require(\"../../validation/register\");\n\nconst validateLoginInput = require(\"../../validation/login\"); // Load User model\n\n\nconst User = require(\"../../models/User\"); // @route POST api/users/register\n// @desc Register user\n// @access Public\n\n\nrouter.post(\"/register\", (req, res) => {\n  // Form validation\n  const _validateRegisterInpu = validateRegisterInput(req.body),\n        errors = _validateRegisterInpu.errors,\n        isValid = _validateRegisterInpu.isValid; ///console.log(req.body);\n  // return req.body\n  // Check validation\n\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  User.findOne({\n    email: req.body.email\n  }).then(user => {\n    if (user && user.confirmed) {\n      const newUser = new User({\n        password: req.body.password\n      });\n      bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw err;\n\n          if (user.password.length < 0) {\n            newUser.password = hash;\n            User.findByIdAndUpdate(user.id, {\n              password: newUser.password\n            }).then(() => res.json({\n              msg: 'success',\n              status: 1\n            })).catch(err => console.log(err));\n          } else {\n            res.json({\n              msg: \"you are already confirmed user\",\n              status: 4\n            });\n          }\n        });\n      });\n    } else if (user && !user.confirmed) {\n      res.json({\n        msg: \"not confirmed user\",\n        status: 2\n      });\n    } else {\n      res.json({\n        msg: \"please send confirm request to regiser.\",\n        status: 3\n      });\n    }\n  });\n}); // @route POST api/users/signin\n// @desc Login user and return JWT token\n// @access Public\n\nrouter.post(\"/signin\", (req, res) => {\n  // Form validation\n  const _validateLoginInput = validateLoginInput(req.body),\n        errors = _validateLoginInput.errors,\n        isValid = _validateLoginInput.isValid; // Check validation\n\n\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const email = req.body.email;\n  const password = req.body.password; // Find user by email\n\n  User.findOne({\n    email\n  }).then(user => {\n    // Check if user exists\n    if (!user) {\n      return res.json({\n        msg: \"your email id is not regisered to RAP. please regiser. \",\n        status: 0\n      });\n    } // Check password\n\n\n    bcrypt.compare(password, user.password).then(isMatch => {\n      if (isMatch) {\n        // User matched\n        // Create JWT Payload\n        const payload = {\n          id: user.id,\n          name: user.name\n        }; // Sign token\n\n        jwt.sign(payload, keys.secretOrKey, {\n          expiresIn: 31556926 // 1 year in seconds\n\n        }, (err, token) => {\n          res.json({\n            success: true,\n            token: \"Bearer \" + token\n          });\n        });\n      } else {\n        return res.status(400).json({\n          passwordincorrect: \"Password incorrect\"\n        });\n      }\n    });\n  });\n});\nrouter.post(\"/confirm\", (req, res) => {\n  User.findOne({\n    email: req.body.email\n  }).then(user => {\n    if (user) {\n      // res.json({msg: \"here\"})\n      if (user && !user.confirmed) {\n        //res.json({ msg: \"here\" })\n        res.json({\n          msg: msgs.resend,\n          status: 0\n        });\n      } else if (user && user.confirmed) {\n        //res.json({ msg: \"here\" })\n        res.json({\n          msg: \"you are already confirm\",\n          status: 2\n        });\n      }\n    } else {\n      // res.json({msg: \"here\"})\n      const newUser = new User({\n        name: req.body.name,\n        email: req.body.email,\n        company: req.body.company\n      });\n      newUser.save().then(sendEmail.email(newUser)).then(user => res.json({\n        msg: msgs.EmailSent,\n        status: 1\n      })).catch(err => console.log(err));\n    }\n  });\n});\nrouter.get('/approve/:email/:id', (req, res) => {\n  let _req$params = req.params,\n      email = _req$params.email,\n      id = _req$params.id; //res.json({ msg: email})\n  //first update confirm in db, trigger email to user  \n\n  userEmail.emailUser(email);\n  User.findByIdAndUpdate(id, {\n    confirmed: true\n  }).then(() => res.json({\n    msg: \"your have approved the user successfully\"\n  })).catch(err => console.log(err));\n});\nmodule.exports = router;","map":{"version":3,"sources":["/Users/anu/Documents/RapidAssessmentPlatform/routes/api/users.js"],"names":["express","require","router","Router","bcrypt","jwt","keys","passport","msgs","sendEmail","userEmail","validateRegisterInput","validateLoginInput","User","post","req","res","body","errors","isValid","status","json","findOne","email","then","user","confirmed","newUser","password","genSalt","err","salt","hash","length","findByIdAndUpdate","id","msg","catch","console","log","compare","isMatch","payload","name","sign","secretOrKey","expiresIn","token","success","passwordincorrect","resend","company","save","EmailSent","get","params","emailUser","module","exports"],"mappings":"AACA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AACA,MAAMC,MAAM,GAAGH,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAD,CAAnB;;AACA,MAAMK,IAAI,GAAGL,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAMM,QAAQ,GAAGN,OAAO,CAAC,UAAD,CAAxB;;AACA,MAAMO,IAAI,GAAGP,OAAO,CAAC,wBAAD,CAApB;;AACA,MAAMQ,SAAS,GAAGR,OAAO,CAAC,wBAAD,CAAzB;;AACA,MAAMS,SAAS,GAAGT,OAAO,CAAC,wBAAD,CAAzB,C,CAEA;;;AACA,MAAMU,qBAAqB,GAAGV,OAAO,CAAC,2BAAD,CAArC;;AACA,MAAMW,kBAAkB,GAAGX,OAAO,CAAC,wBAAD,CAAlC,C,CAEA;;;AACA,MAAMY,IAAI,GAAGZ,OAAO,CAAC,mBAAD,CAApB,C,CAEA;AACA;AACA;;;AACAC,MAAM,CAACY,IAAP,CAAY,WAAZ,EAAyB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACrC;AADqC,gCAETL,qBAAqB,CAACI,GAAG,CAACE,IAAL,CAFZ;AAAA,QAE7BC,MAF6B,yBAE7BA,MAF6B;AAAA,QAErBC,OAFqB,yBAErBA,OAFqB,EAGrC;AACA;AACA;;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CAAP;AACD;;AAEDL,EAAAA,IAAI,CAACS,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAER,GAAG,CAACE,IAAJ,CAASM;AAAlB,GAAb,EAAwCC,IAAxC,CAA6CC,IAAI,IAAI;AACnD,QAAIA,IAAI,IAAIA,IAAI,CAACC,SAAjB,EAA4B;AAC1B,YAAMC,OAAO,GAAG,IAAId,IAAJ,CAAS;AACvBe,QAAAA,QAAQ,EAAEb,GAAG,CAACE,IAAJ,CAASW;AADI,OAAT,CAAhB;AAIAxB,MAAAA,MAAM,CAACyB,OAAP,CAAe,EAAf,EAAmB,CAACC,GAAD,EAAMC,IAAN,KAAe;AAChC3B,QAAAA,MAAM,CAAC4B,IAAP,CAAYL,OAAO,CAACC,QAApB,EAA8BG,IAA9B,EAAoC,CAACD,GAAD,EAAME,IAAN,KAAe;AACjD,cAAIF,GAAJ,EAAS,MAAMA,GAAN;;AACT,cAAGL,IAAI,CAACG,QAAL,CAAcK,MAAd,GAAuB,CAA1B,EAA4B;AAC1BN,YAAAA,OAAO,CAACC,QAAR,GAAmBI,IAAnB;AACAnB,YAAAA,IAAI,CAACqB,iBAAL,CAAuBT,IAAI,CAACU,EAA5B,EAAgC;AAAEP,cAAAA,QAAQ,EAAED,OAAO,CAACC;AAApB,aAAhC,EACGJ,IADH,CACQ,MAAMR,GAAG,CAACK,IAAJ,CAAS;AAAEe,cAAAA,GAAG,EAAE,SAAP;AAAkBhB,cAAAA,MAAM,EAAE;AAA1B,aAAT,CADd,EAEGiB,KAFH,CAESP,GAAG,IAAIQ,OAAO,CAACC,GAAR,CAAYT,GAAZ,CAFhB;AAGD,WALD,MAKK;AACHd,YAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEe,cAAAA,GAAG,EAAE,gCAAP;AAAyChB,cAAAA,MAAM,EAAE;AAAjD,aAAT;AACD;AAEF,SAXD;AAYD,OAbD;AAeD,KApBD,MAoBO,IAAIK,IAAI,IAAI,CAACA,IAAI,CAACC,SAAlB,EAA6B;AAClCV,MAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEe,QAAAA,GAAG,EAAE,oBAAP;AAA6BhB,QAAAA,MAAM,EAAE;AAArC,OAAT;AACD,KAFM,MAGF;AACHJ,MAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEe,QAAAA,GAAG,EAAE,yCAAP;AAAkDhB,QAAAA,MAAM,EAAE;AAA1D,OAAT;AACD;AACF,GA3BD;AA4BD,CAtCD,E,CAwCA;AACA;AACA;;AACAlB,MAAM,CAACY,IAAP,CAAY,SAAZ,EAAuB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACnC;AADmC,8BAGPJ,kBAAkB,CAACG,GAAG,CAACE,IAAL,CAHX;AAAA,QAG3BC,MAH2B,uBAG3BA,MAH2B;AAAA,QAGnBC,OAHmB,uBAGnBA,OAHmB,EAKnC;;;AACA,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOH,GAAG,CAACI,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,MAArB,CAAP;AACD;;AAED,QAAMK,KAAK,GAAGR,GAAG,CAACE,IAAJ,CAASM,KAAvB;AACA,QAAMK,QAAQ,GAAGb,GAAG,CAACE,IAAJ,CAASW,QAA1B,CAXmC,CAanC;;AACAf,EAAAA,IAAI,CAACS,OAAL,CAAa;AAAEC,IAAAA;AAAF,GAAb,EAAwBC,IAAxB,CAA6BC,IAAI,IAAI;AACnC;AACA,QAAI,CAACA,IAAL,EAAW;AACT,aAAOT,GAAG,CAACK,IAAJ,CAAS;AAAEe,QAAAA,GAAG,EAAE,yDAAP;AAAkEhB,QAAAA,MAAM,EAAE;AAA1E,OAAT,CAAP;AACD,KAJkC,CAMnC;;;AACAhB,IAAAA,MAAM,CAACoC,OAAP,CAAeZ,QAAf,EAAyBH,IAAI,CAACG,QAA9B,EAAwCJ,IAAxC,CAA6CiB,OAAO,IAAI;AACtD,UAAIA,OAAJ,EAAa;AACX;AACA;AACA,cAAMC,OAAO,GAAG;AACdP,UAAAA,EAAE,EAAEV,IAAI,CAACU,EADK;AAEdQ,UAAAA,IAAI,EAAElB,IAAI,CAACkB;AAFG,SAAhB,CAHW,CAQX;;AACAtC,QAAAA,GAAG,CAACuC,IAAJ,CACEF,OADF,EAEEpC,IAAI,CAACuC,WAFP,EAGE;AACEC,UAAAA,SAAS,EAAE,QADb,CACsB;;AADtB,SAHF,EAME,CAAChB,GAAD,EAAMiB,KAAN,KAAgB;AACd/B,UAAAA,GAAG,CAACK,IAAJ,CAAS;AACP2B,YAAAA,OAAO,EAAE,IADF;AAEPD,YAAAA,KAAK,EAAE,YAAYA;AAFZ,WAAT;AAID,SAXH;AAaD,OAtBD,MAsBO;AACL,eAAO/B,GAAG,CACPI,MADI,CACG,GADH,EAEJC,IAFI,CAEC;AAAE4B,UAAAA,iBAAiB,EAAE;AAArB,SAFD,CAAP;AAGD;AACF,KA5BD;AA6BD,GApCD;AAqCD,CAnDD;AAqDA/C,MAAM,CAACY,IAAP,CAAY,UAAZ,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAEpCH,EAAAA,IAAI,CAACS,OAAL,CAAa;AAAEC,IAAAA,KAAK,EAAER,GAAG,CAACE,IAAJ,CAASM;AAAlB,GAAb,EAAwCC,IAAxC,CAA6CC,IAAI,IAAI;AAEnD,QAAIA,IAAJ,EAAU;AACR;AACA,UAAIA,IAAI,IAAI,CAACA,IAAI,CAACC,SAAlB,EAA6B;AAC3B;AACAV,QAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEe,UAAAA,GAAG,EAAE5B,IAAI,CAAC0C,MAAZ;AAAoB9B,UAAAA,MAAM,EAAE;AAA5B,SAAT;AACD,OAHD,MAIK,IAAIK,IAAI,IAAIA,IAAI,CAACC,SAAjB,EAA4B;AAC/B;AACAV,QAAAA,GAAG,CAACK,IAAJ,CAAS;AAAEe,UAAAA,GAAG,EAAE,yBAAP;AAAkChB,UAAAA,MAAM,EAAE;AAA1C,SAAT;AAED;AACF,KAXD,MAYK;AACH;AACA,YAAMO,OAAO,GAAG,IAAId,IAAJ,CAAS;AACvB8B,QAAAA,IAAI,EAAE5B,GAAG,CAACE,IAAJ,CAAS0B,IADQ;AAEvBpB,QAAAA,KAAK,EAAER,GAAG,CAACE,IAAJ,CAASM,KAFO;AAGvB4B,QAAAA,OAAO,EAAEpC,GAAG,CAACE,IAAJ,CAASkC;AAHK,OAAT,CAAhB;AAMAxB,MAAAA,OAAO,CACJyB,IADH,GAEG5B,IAFH,CAGIf,SAAS,CAACc,KAAV,CAAgBI,OAAhB,CAHJ,EAIGH,IAJH,CAIQC,IAAI,IAAIT,GAAG,CAACK,IAAJ,CAAS;AAAEe,QAAAA,GAAG,EAAE5B,IAAI,CAAC6C,SAAZ;AAAuBjC,QAAAA,MAAM,EAAE;AAA/B,OAAT,CAJhB,EAKGiB,KALH,CAKSP,GAAG,IAAIQ,OAAO,CAACC,GAAR,CAAYT,GAAZ,CALhB;AAMD;AAEF,GA9BD;AA+BD,CAjCD;AAoCA5B,MAAM,CAACoD,GAAP,CAAW,qBAAX,EAAkC,CAACvC,GAAD,EAAMC,GAAN,KAAc;AAAA,oBAC1BD,GAAG,CAACwC,MADsB;AAAA,MACxChC,KADwC,eACxCA,KADwC;AAAA,MACjCY,EADiC,eACjCA,EADiC,EAE9C;AACA;;AACAzB,EAAAA,SAAS,CAAC8C,SAAV,CAAoBjC,KAApB;AAEAV,EAAAA,IAAI,CAACqB,iBAAL,CAAuBC,EAAvB,EAA2B;AAAET,IAAAA,SAAS,EAAE;AAAb,GAA3B,EACGF,IADH,CACQ,MAAMR,GAAG,CAACK,IAAJ,CAAS;AAAEe,IAAAA,GAAG,EAAE;AAAP,GAAT,CADd,EAEGC,KAFH,CAESP,GAAG,IAAIQ,OAAO,CAACC,GAAR,CAAYT,GAAZ,CAFhB;AAID,CAVD;AAYA2B,MAAM,CAACC,OAAP,GAAiBxD,MAAjB","sourcesContent":["\nconst express = require(\"express\");\nconst router = express.Router();\nconst bcrypt = require(\"bcryptjs\");\nconst jwt = require(\"jsonwebtoken\");\nconst keys = require(\"../../config/keys\");\nconst passport = require(\"passport\");\nconst msgs = require('../../email/email.msgs');\nconst sendEmail = require('../../email/email.send');\nconst userEmail = require('../../email/email.user');\n\n// Load input validation\nconst validateRegisterInput = require(\"../../validation/register\");\nconst validateLoginInput = require(\"../../validation/login\");\n\n// Load User model\nconst User = require(\"../../models/User\");\n\n// @route POST api/users/register\n// @desc Register user\n// @access Public\nrouter.post(\"/register\", (req, res) => {\n  // Form validation\n  const { errors, isValid } = validateRegisterInput(req.body);\n  ///console.log(req.body);\n  // return req.body\n  // Check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  User.findOne({ email: req.body.email }).then(user => {\n    if (user && user.confirmed) {\n      const newUser = new User({\n        password: req.body.password\n      });\n\n      bcrypt.genSalt(10, (err, salt) => {\n        bcrypt.hash(newUser.password, salt, (err, hash) => {\n          if (err) throw err;\n          if(user.password.length < 0){\n            newUser.password = hash;\n            User.findByIdAndUpdate(user.id, { password: newUser.password })\n              .then(() => res.json({ msg: 'success', status: 1 }))\n              .catch(err => console.log(err))\n          }else{\n            res.json({ msg: \"you are already confirmed user\", status: 4 })\n          }\n          \n        });\n      });\n\n    } else if (user && !user.confirmed) {\n      res.json({ msg: \"not confirmed user\", status: 2 })\n    }\n    else {\n      res.json({ msg: \"please send confirm request to regiser.\", status: 3 })\n    }\n  });\n});\n\n// @route POST api/users/signin\n// @desc Login user and return JWT token\n// @access Public\nrouter.post(\"/signin\", (req, res) => {\n  // Form validation\n\n  const { errors, isValid } = validateLoginInput(req.body);\n\n  // Check validation\n  if (!isValid) {\n    return res.status(400).json(errors);\n  }\n\n  const email = req.body.email;\n  const password = req.body.password;\n\n  // Find user by email\n  User.findOne({ email }).then(user => {\n    // Check if user exists\n    if (!user) {\n      return res.json({ msg: \"your email id is not regisered to RAP. please regiser. \", status: 0 });\n    }\n\n    // Check password\n    bcrypt.compare(password, user.password).then(isMatch => {\n      if (isMatch) {\n        // User matched\n        // Create JWT Payload\n        const payload = {\n          id: user.id,\n          name: user.name\n        };\n\n        // Sign token\n        jwt.sign(\n          payload,\n          keys.secretOrKey,\n          {\n            expiresIn: 31556926 // 1 year in seconds\n          },\n          (err, token) => {\n            res.json({\n              success: true,\n              token: \"Bearer \" + token\n            });\n          }\n        );\n      } else {\n        return res\n          .status(400)\n          .json({ passwordincorrect: \"Password incorrect\" });\n      }\n    });\n  });\n});\n\nrouter.post(\"/confirm\", (req, res) => {\n\n  User.findOne({ email: req.body.email }).then(user => {\n\n    if (user) {\n      // res.json({msg: \"here\"})\n      if (user && !user.confirmed) {\n        //res.json({ msg: \"here\" })\n        res.json({ msg: msgs.resend, status: 0 })\n      }\n      else if (user && user.confirmed) {\n        //res.json({ msg: \"here\" })\n        res.json({ msg: \"you are already confirm\", status: 2 })\n\n      }\n    }\n    else {\n      // res.json({msg: \"here\"})\n      const newUser = new User({\n        name: req.body.name,\n        email: req.body.email,\n        company: req.body.company\n      });\n\n      newUser\n        .save()\n        .then(\n          sendEmail.email(newUser))\n        .then(user => res.json({ msg: msgs.EmailSent, status: 1 }))\n        .catch(err => console.log(err));\n    }\n\n  });\n});\n\n\nrouter.get('/approve/:email/:id', (req, res) => {\n  let { email, id } = req.params;\n  //res.json({ msg: email})\n  //first update confirm in db, trigger email to user  \n  userEmail.emailUser(email)\n\n  User.findByIdAndUpdate(id, { confirmed: true })\n    .then(() => res.json({ msg: \"your have approved the user successfully\" }))\n    .catch(err => console.log(err))\n\n});\n\nmodule.exports = router;\n\n"]},"metadata":{},"sourceType":"script"}