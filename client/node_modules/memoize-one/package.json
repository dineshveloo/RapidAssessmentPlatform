{
  "_args": [
    [
      {
        "raw": "memoize-one@^5.0.0",
        "scope": null,
        "escapedName": "memoize-one",
        "name": "memoize-one",
        "rawSpec": "^5.0.0",
        "spec": ">=5.0.0 <6.0.0",
        "type": "range"
      },
      "/Users/anu/Documents/RapidAssessmentPlatform/client/node_modules/styled-components"
    ]
  ],
  "_from": "memoize-one@^5.0.0",
  "_hasShrinkwrap": false,
  "_id": "memoize-one@5.1.1",
  "_location": "/memoize-one",
  "_nodeVersion": "10.15.3",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/memoize-one_5.1.1_1566529991146_0.11033357372791275"
  },
  "_npmUser": {
    "name": "alexreardon",
    "email": "alexreardon@gmail.com"
  },
  "_npmVersion": "6.9.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "memoize-one@^5.0.0",
    "scope": null,
    "escapedName": "memoize-one",
    "name": "memoize-one",
    "rawSpec": "^5.0.0",
    "spec": ">=5.0.0 <6.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/styled-components"
  ],
  "_resolved": "https://registry.npmjs.org/memoize-one/-/memoize-one-5.1.1.tgz",
  "_shasum": "047b6e3199b508eaec03504de71229b8eb1d75c0",
  "_shrinkwrap": null,
  "_spec": "memoize-one@^5.0.0",
  "_where": "/Users/anu/Documents/RapidAssessmentPlatform/client/node_modules/styled-components",
  "author": {
    "name": "Alex Reardon",
    "email": "alexreardon@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/alexreardon/memoize-one/issues"
  },
  "config": {
    "prettier_target": "src/**/*.{ts,js,jsx,md,json} test/**/*.{ts,js,jsx,md,json}"
  },
  "dependencies": {},
  "description": "A memoization library which only remembers the latest invocation",
  "devDependencies": {
    "@types/jest": "^24.0.18",
    "@types/lodash.isequal": "^4.5.5",
    "@typescript-eslint/eslint-plugin": "^2.0.0",
    "@typescript-eslint/parser": "^2.0.0",
    "benchmark": "^2.1.4",
    "cross-env": "^5.2.0",
    "eslint": "6.2.0",
    "eslint-config-prettier": "^6.1.0",
    "eslint-plugin-jest": "^22.15.1",
    "eslint-plugin-prettier": "^3.1.0",
    "jest": "^24.9.0",
    "lodash.isequal": "^4.5.0",
    "prettier": "1.18.2",
    "rimraf": "3.0.0",
    "rollup": "^1.19.4",
    "rollup-plugin-replace": "^2.2.0",
    "rollup-plugin-terser": "^5.1.1",
    "rollup-plugin-typescript": "^1.0.1",
    "ts-jest": "^24.0.2",
    "ts-node": "^8.3.0",
    "tslib": "^1.10.0",
    "typescript": "^3.5.3"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-HKeeBpWvqiVJD57ZUAsJNm71eHTykffzcLZVYWiVfQeI1rJtuEaS7hQiEpWfVVk18donPwJEcFKIkCmPJNOhHA==",
    "shasum": "047b6e3199b508eaec03504de71229b8eb1d75c0",
    "tarball": "https://registry.npmjs.org/memoize-one/-/memoize-one-5.1.1.tgz",
    "fileCount": 13,
    "unpackedSize": 17962,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdX1nHCRA9TVsSAnZWagAALsoP/i5b7NoxwWvFmiYNZwjC\n7mxfGX5o8N0zZf78h5O6KHBeJykTMU8P70Lk0kgM6rl1e+Dk3tPv0BqtWnj6\naqhk1GiO30c2LjBq8QDlvWmdq0dpEUAANedxQW24zHTf1HTi7+pBTELGKdWi\nOFgnPLKTCAiaejMQv8efaH9HSE/FqyM6ryZHX5mSBw/+k86Xca2V/F7bjkd7\nze/10BbUyJ6IPo2HuwRU+8X2pkI6RwlPSgdPvAntbBip92VVsj4tRH8fcro5\nNFBpGaqMTa88eh64GPSSy3OLe/7rq1mm2TcQqbbz3npvA7xYz4CZT5344mmJ\nuzZMq5t7PUBIb8/dqgSOY8qe0/qN85Wg4qfcnrKu5OXJ9zmVNki38OAS+jQ4\nIUkPctyKR07V1QfHn4UX80pNbxeQwCPT+ZLaCxUZBIn1wugKeW5r3WJYednR\nkZcvceOuoY9oixV/Bgu1QkYh2LgTT6RPgFqZPIVWaWalTPUBfCIdht9s43HU\n9z20Id8apWjfA0iwG5b99kcTgM/WMjqZ25HrfLHU4wV1x+vAnBP3JMz0hesK\ncdmjpcbjWWpQBtmJY8zgUi78AFsNKctJuorKIG6BDuWgtrYe6j5R/UWt2YLU\n7JqDg3JfK2plPfXlzAYZPye8MlAfCQXRLUtvXT+XtghPjfOmrUiRFrI2Y1ur\nRqVP\r\n=2NQp\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "/dist",
    "/src"
  ],
  "gitHead": "8fd7a64ae6d7505cffc0a7e97075b171f85faf06",
  "homepage": "https://github.com/alexreardon/memoize-one#readme",
  "keywords": [
    "memoize",
    "memoization",
    "cache",
    "performance"
  ],
  "license": "MIT",
  "main": "dist/memoize-one.cjs.js",
  "maintainers": [
    {
      "name": "alexreardon",
      "email": "alexreardon@gmail.com"
    }
  ],
  "module": "dist/memoize-one.esm.js",
  "name": "memoize-one",
  "optionalDependencies": {},
  "readme": "# memoize-one\n\nA memoization library that only caches the result of the most recent arguments.\n\n[![Build Status](https://travis-ci.org/alexreardon/memoize-one.svg?branch=master)](https://travis-ci.org/alexreardon/memoize-one)\n[![npm](https://img.shields.io/npm/v/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n![types](https://img.shields.io/badge/types-typescript%20%7C%20flow-blueviolet)\n[![dependencies](https://david-dm.org/alexreardon/memoize-one.svg)](https://david-dm.org/alexreardon/memoize-one)\n[![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n[![Downloads per month](https://img.shields.io/npm/dm/memoize-one.svg)](https://www.npmjs.com/package/memoize-one)\n\n## Rationale\n\nUnlike other memoization libraries, `memoize-one` only remembers the latest arguments and result. No need to worry about cache busting mechanisms such as `maxAge`, `maxSize`, `exclusions` and so on which can be prone to memory leaks. `memoize-one` simply remembers the last arguments, and if the function is next called with the same arguments then it returns the previous result.\n\n## Usage\n\n```js\nimport memoizeOne from 'memoize-one';\n\nconst add = (a, b) => a + b;\nconst memoizedAdd = memoizeOne(add);\n\nmemoizedAdd(1, 2); // 3\n\nmemoizedAdd(1, 2); // 3\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(2, 3); // 5\n// Add function is called to get new value\n\nmemoizedAdd(2, 3); // 5\n// Add function is not executed: previous result is returned\n\nmemoizedAdd(1, 2); // 3\n// Add function is called to get new value.\n// While this was previously cached,\n// it is not the latest so the cached result is lost\n```\n\n## Installation\n\n```bash\n# yarn\nyarn add memoize-one\n\n# npm\nnpm install memoize-one --save\n```\n\n## Custom equality function\n\nYou can also pass in a custom function for checking the equality of two sets of arguments\n\n```js\nconst memoized = memoizeOne(fn, isEqual);\n```\n\nThe equality function needs to conform to this `type`:\n\n```ts\ntype EqualityFn = (newArgs: any[], lastArgs: any[]) => boolean;\n\n// You can import this type from memoize-one if you like\n\n// typescript\nimport { EqualityFn } from 'memoize-one';\n\n// flow\nimport type { EqualityFn } from 'memoize-one';\n```\n\nAn equality function should return `true` if the arguments are equal. If `true` is returned then the wrapped function will not be called.\n\nThe default equality function is a shallow equal check of all arguments (each argument is compared with `===`). If the `length` of arguments change, then the default equality function makes no shallow equality checks. You are welcome to decide if you want to return `false` if the `length` of the arguments is not equal\n\nA custom equality function needs to compare `Arrays`. The `newArgs` array will be a new reference every time so a simple `newArgs === lastArgs` will always return `false`.\n\nEquality functions are not called if the `this` context of the function has changed (see below).\n\nHere is an example that uses a `lodash.isequal` deep equal equality check\n\n> `lodash.isequal` correctly handles deep comparing two arrays\n\n```js\nimport memoizeOne from 'memoize-one';\nimport isDeepEqual from 'lodash.isequal';\n\nconst identity = x => x;\n\nconst shallowMemoized = memoizeOne(identity);\nconst deepMemoized = memoizeOne(identity, isDeepEqual);\n\nconst result1 = shallowMemoized({ foo: 'bar' });\nconst result2 = shallowMemoized({ foo: 'bar' });\n\nresult1 === result2; // false - difference reference\n\nconst result3 = deepMemoized({ foo: 'bar' });\nconst result4 = deepMemoized({ foo: 'bar' });\n\nresult3 === result4; // true - arguments are deep equal\n```\n\n## `this`\n\n### `memoize-one` correctly respects `this` control\n\nThis library takes special care to maintain, and allow control over the the `this` context for **both** the original function being memoized as well as the returned memoized function. Both the original function and the memoized function's `this` context respect [all the `this` controlling techniques](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md):\n\n- new bindings (`new`)\n- explicit binding (`call`, `apply`, `bind`);\n- implicit binding (call site: `obj.foo()`);\n- default binding (`window` or `undefined` in `strict mode`);\n- fat arrow binding (binding to lexical `this`)\n- ignored this (pass `null` as `this` to explicit binding)\n\n### Changes to `this` is considered an argument change\n\nChanges to the running context (`this`) of a function can result in the function returning a different value even though its arguments have stayed the same:\n\n```js\nfunction getA() {\n  return this.a;\n}\n\nconst temp1 = {\n  a: 20,\n};\nconst temp2 = {\n  a: 30,\n};\n\ngetA.call(temp1); // 20\ngetA.call(temp2); // 30\n```\n\nTherefore, in order to prevent against unexpected results, `memoize-one` takes into account the current execution context (`this`) of the memoized function. If `this` is different to the previous invocation then it is considered a change in argument. [further discussion](https://github.com/alexreardon/memoize-one/issues/3).\n\nGenerally this will be of no impact if you are not explicity controlling the `this` context of functions you want to memoize with [explicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#explicit-binding) or [implicit binding](https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/ch2.md#implicit-binding). `memoize-One` will detect when you are manipulating `this` and will then consider the `this` context as an argument. If `this` changes, it will re-execute the original function even if the arguments have not changed.\n\n## When your result function `throw`s\n\n> There is no caching when your result function throws\n\nIf your result function `throw`s then the memoized function will also throw. The throw will not break the memoized functions existing argument cache. It means the memoized function will pretend like it was never called with arguments that made it `throw`.\n\n```js\nconst canThrow = (name: string) => {\n  console.log('called');\n  if (name === 'throw') {\n    throw new Error(name);\n  }\n  return { name };\n};\n\nconst memoized = memoizeOne(canThrow);\n\nconst value1 = memoized('Alex');\n// console.log => 'called'\nconst value2 = memoized('Alex');\n// result function not called\n\nconsole.log(value1 === value2);\n// console.log => true\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n} catch (e) {\n  firstError = e;\n}\n\ntry {\n  memoized('throw');\n  // console.log => 'called'\n  // the result function was called again even though it was called twice\n  // with the 'throw' string\n} catch (e) {\n  secondError = e;\n}\n\nconsole.log(firstError !== secondError);\n\nconst value3 = memoized('Alex');\n// result function not called as the original memoization cache has not been busted\nconsole.log(value1 === value3);\n// console.log => true\n```\n\n## Performance 🚀\n\n### Tiny\n\n`memoize-one` is super lightweight at [![min](https://img.shields.io/bundlephobia/min/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) minified and [![minzip](https://img.shields.io/bundlephobia/minzip/memoize-one.svg?label=)](https://www.npmjs.com/package/memoize-one) gzipped. (`1KB` = `1,024 Bytes`)\n\n### Extremely fast\n\n`memoize-one` performs better or on par with than other popular memoization libraries for the purpose of remembering the latest invocation.\n\n**Results**\n\n- [simple arguments](https://www.measurethat.net/Benchmarks/ShowResult/4452)\n- [complex arguments](https://www.measurethat.net/Benchmarks/ShowResult/4488)\n\nThe comparisons are not exhaustive and are primarily to show that `memoize-one` accomplishes remembering the latest invocation really fast. The benchmarks do not take into account the differences in feature sets, library sizes, parse time, and so on.\n\n## Code health 👍\n\n- Tested with all built in [JavaScript types](https://github.com/getify/You-Dont-Know-JS/blob/master/types%20%26%20grammar/ch1.md).\n- 100% code coverage\n- [Continuous integration](https://travis-ci.org/alexreardon/memoize-one) to run tests and type checks.\n- Written in `Typescript`\n- Correct typing for `Typescript` and `flow` type systems\n- No dependencies\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/alexreardon/memoize-one.git"
  },
  "scripts": {
    "build": "yarn build:clean && yarn build:dist && yarn build:typescript && yarn build:flow",
    "build:clean": "rimraf dist",
    "build:dist": "rollup -c",
    "build:flow": "cp src/memoize-one.js.flow dist/memoize-one.cjs.js.flow",
    "build:typescript": "tsc ./src/memoize-one.ts --emitDeclarationOnly --declaration --outDir ./dist",
    "lint": "yarn lint:eslint && yarn prettier:check",
    "lint:eslint": "eslint $npm_package_config_prettier_target",
    "perf": "ts-node ./benchmarks/shallow-equal.ts",
    "prepublishOnly": "yarn build",
    "prettier:check": "yarn prettier --debug-check $npm_package_config_prettier_target",
    "prettier:write": "yarn prettier --write $npm_package_config_prettier_target",
    "test": "yarn jest",
    "typecheck": "yarn tsc --noEmit",
    "validate": "yarn lint && yarn typecheck"
  },
  "sideEffects": false,
  "types": "dist/memoize-one.d.ts",
  "version": "5.1.1"
}
