{
  "_args": [
    [
      {
        "raw": "enhanced-resolve@^4.1.0",
        "scope": null,
        "escapedName": "enhanced-resolve",
        "name": "enhanced-resolve",
        "rawSpec": "^4.1.0",
        "spec": ">=4.1.0 <5.0.0",
        "type": "range"
      },
      "/Users/anu/Documents/RapidAssessmentPlatform/client/node_modules/webpack"
    ]
  ],
  "_from": "enhanced-resolve@^4.1.0",
  "_hasShrinkwrap": false,
  "_id": "enhanced-resolve@4.2.0",
  "_location": "/enhanced-resolve",
  "_nodeVersion": "14.3.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/enhanced-resolve_4.2.0_1592259496227_0.17945711883834026"
  },
  "_npmUser": {
    "name": "sokra",
    "email": "tobias.koppers@googlemail.com"
  },
  "_npmVersion": "6.14.5",
  "_phantomChildren": {
    "core-util-is": "1.0.2",
    "errno": "0.1.7",
    "inherits": "2.0.4",
    "process-nextick-args": "2.0.1",
    "safe-buffer": "5.1.2",
    "util-deprecate": "1.0.2"
  },
  "_requested": {
    "raw": "enhanced-resolve@^4.1.0",
    "scope": null,
    "escapedName": "enhanced-resolve",
    "name": "enhanced-resolve",
    "rawSpec": "^4.1.0",
    "spec": ">=4.1.0 <5.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/webpack"
  ],
  "_resolved": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-4.2.0.tgz",
  "_shasum": "5d43bda4a0fd447cb0ebbe71bef8deff8805ad0d",
  "_shrinkwrap": null,
  "_spec": "enhanced-resolve@^4.1.0",
  "_where": "/Users/anu/Documents/RapidAssessmentPlatform/client/node_modules/webpack",
  "author": {
    "name": "Tobias Koppers @sokra"
  },
  "bugs": {
    "url": "https://github.com/webpack/enhanced-resolve/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.2",
    "memory-fs": "^0.5.0",
    "tapable": "^1.0.0"
  },
  "description": "Offers a async require.resolve function. It's highly configurable.",
  "devDependencies": {
    "codecov.io": "^0.1.6",
    "coveralls": "^2.11.6",
    "eslint": "^5.9.0",
    "eslint-config-prettier": "^3.3.0",
    "eslint-plugin-node": "^8.0.0",
    "eslint-plugin-prettier": "^3.0.0",
    "husky": "^1.2.0",
    "istanbul": "^0.4.1",
    "lint-staged": "^8.1.0",
    "mocha": "^2.3.4",
    "prettier": "^1.15.2",
    "should": "^8.0.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-S7eiFb/erugyd1rLb6mQ3Vuq+EXHv5cpCkNqqIkYkBgN2QdFnyCZzFBleqwGEx4lgNGYij81BWnCrFNK7vxvjQ==",
    "shasum": "5d43bda4a0fd447cb0ebbe71bef8deff8805ad0d",
    "tarball": "https://registry.npmjs.org/enhanced-resolve/-/enhanced-resolve-4.2.0.tgz",
    "fileCount": 43,
    "unpackedSize": 90356,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJe5/OoCRA9TVsSAnZWagAAdgsP/177HvjkAGfhHFSXmuPp\nJW8m509JEdPw/QV6RHJ2T+E4a5bd+1oRATwtQ3kj4057UNXL270OJNz6XttV\nMo4rzeBoMHJ5rw7pIlcEWZp/lFzgQTyeHyeT0KqYUALAmgbmG9xlRcajsS4F\nDlfUUFuYrCCvlqMwQUsFwRxMSCPlnqjNv3p3NM3yVZkt4UwcR4lFLOuUn5cB\nyabjqkxNW8EWCFVJYwyMY3d6HNimJk2Bwl2N7EKR2IlcDNmA7/pIbHjW8ICt\nTTU8ObKBOjNbQ3yawn2gAgXp0fhyxl+JtKlok6qNOtNbAcQzmlGOB6xwt04+\nLvhk0+G5ZTZxy9g6thz9Ez8wRfB/7sUSEmrRVBcpCjc6SlCYMmJuQRznEOFT\nI/hWfm0XCxK/MMzEFPK2yaaeJGA+LzyugwnjMawf4R37GJgIK9yJ3NHrRfvm\n7DDKqmpX7dG6d7HsilItH386nxD00YD/kKSyEufXOL+hdT4iK9Wp38WykX3C\nNU0QU1nF7+/hJDEiX1YpHr92OMkLBpjP3/PqkordPUdZ/yxovA/nCJhUCQOQ\nICmrwtysN661MzaOF3ulhMbxPDphpKcACKFy77MlDhgtroqeZpJ7RL0d6uC9\nG2VAAsHqnRri2QJ+FcmA1+xx6iCbM3UJWC9Hd2E+bB7dbW10U+tfFUzsU8ka\nr25+\r\n=4Tc/\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "engines": {
    "node": ">=6.9.0"
  },
  "files": [
    "lib",
    "LICENSE"
  ],
  "gitHead": "00a347d8bcf60ea296c1245e23052f1987c3687d",
  "homepage": "http://github.com/webpack/enhanced-resolve",
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "lint-staged": {
    "*.js": [
      "eslint --cache"
    ]
  },
  "main": "lib/node.js",
  "maintainers": [
    {
      "name": "bebraw",
      "email": "bebraw@gmail.com"
    },
    {
      "name": "jhnns",
      "email": "mail@johannesewald.de"
    },
    {
      "name": "sokra",
      "email": "tobias.koppers@googlemail.com"
    },
    {
      "name": "thelarkinn",
      "email": "sean.larkin@cuw.edu"
    }
  ],
  "name": "enhanced-resolve",
  "optionalDependencies": {},
  "readme": "# enhanced-resolve\n\nOffers an async require.resolve function. It's highly configurable.\n\n## Features\n\n* plugin system\n* provide a custom filesystem\n* sync and async node.js filesystems included\n\n\n## Getting Started\n### Install\n```sh\n# npm\nnpm install enhanced-resolve\n# or Yarn\nyarn add enhanced-resolve\n```\n\n### Creating a Resolver\nThe easiest way to create a resolver is to use the `createResolver` function on `ResolveFactory`, along with one of the supplied File System implementations.\n```js\nconst {\n  NodeJsInputFileSystem,\n  CachedInputFileSystem,\n  ResolverFactory\n} = require('enhanced-resolve');\n\n// create a resolver\nconst myResolver = ResolverFactory.createResolver({\n  // Typical usage will consume the `NodeJsInputFileSystem` + `CachedInputFileSystem`, which wraps the Node.js `fs` wrapper to add resilience + caching.\n  fileSystem: new CachedInputFileSystem(new NodeJsInputFileSystem(), 4000),\n  extensions: ['.js', '.json']\n  /* any other resolver options here. Options/defaults can be seen below */\n});\n\n// resolve a file with the new resolver\nconst context = {};\nconst resolveContext = {};\nconst lookupStartPath = '/Users/webpack/some/root/dir';\nconst request = './path/to-look-up.js';\nmyResolver.resolve({}, lookupStartPath, request, resolveContext, (err/*Error*/, filepath/*string*/) => {\n  // Do something with the path\n});\n```\n\nFor more examples creating different types resolvers (sync/async, context, etc) see `lib/node.js`.\n#### Resolver Options\n| Field                    | Default                     | Description                                                                        |\n| ------------------------ | --------------------------- | ---------------------------------------------------------------------------------- |\n| alias                    | []                          | A list of module alias configurations or an object which maps key to value |\n| aliasFields              | []                          | A list of alias fields in description files |\n| cacheWithContext         | true                        | If unsafe cache is enabled, includes `request.context` in the cache key  |\n| descriptionFiles         | [\"package.json\"]            | A list of description files to read from |\n| enforceExtension         | false                       | Enforce that a extension from extensions must be used |\n| enforceModuleExtension   | false                       | Enforce that a extension from moduleExtensions must be used |\n| extensions               | [\".js\", \".json\", \".node\"]   | A list of extensions which should be tried for files |\n| mainFields               | [\"main\"]                    | A list of main fields in description files |\n| mainFiles                | [\"index\"]                   | A list of main files in directories |\n| modules                  | [\"node_modules\"]            | A list of directories to resolve modules from, can be absolute path or folder name |\n| unsafeCache              | false                       | Use this cache object to unsafely cache the successful requests |\n| plugins                  | []                          | A list of additional resolve plugins which should be applied |\n| symlinks                 | true                        | Whether to resolve symlinks to their symlinked location |\n| cachePredicate           | function() { return true }; | A function which decides whether a request should be cached or not. An object is passed to the function with `path` and `request` properties. |\n| moduleExtensions         | []                          | A list of module extensions which should be tried for modules |\n| resolveToContext         | false                       | Resolve to a context instead of a file |\n| restrictions             | []                          | A list of resolve restrictions |\n| fileSystem               |                             | The file system which should be used |\n| resolver                 | undefined                   | A prepared Resolver to which the plugins are attached |\n\n## Plugins\nSimilar to `webpack`, the core of `enhanced-resolve` functionality is implemented as individual plugins that are executed using [`Tapable`](https://github.com/webpack/tapable). These plugins can extend the functionality of the library, adding other ways for files/contexts to be resolved.\n\nA plugin should be a `class` (or its ES5 equivalent) with an `apply` method. The `apply` method will receive a `resolver` instance, that can be used to hook in to the event system.\n\n### Plugin Boilerplate\n```js\nclass MyResolverPlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"MyResolverPlugin\", (request, resolveContext, callback) => {\n      // Any logic you need to create a new `request` can go here\n      resolver.doResolve(target, request, null, resolveContext, callback);\n    });\n  }\n}\n```\n\nPlugins are executed in a pipeline, and register which event they should be executed before/after. In the example above, `source` is the name of the event that starts the pipeline, and `target` is what event this plugin should fire, which is what continues the execution of the pipeline. For an example of how these different plugin events create a chain, see `lib/ResolverFactory.js`, in the `//// pipeline ////` section.\n\n## Tests\n\n``` javascript\nnpm test\n```\n\n[![Build Status](https://secure.travis-ci.org/webpack/enhanced-resolve.png?branch=master)](http://travis-ci.org/webpack/enhanced-resolve)\n\n\n## Passing options from webpack\nIf you are using `webpack`, and you want to pass custom options to `enhanced-resolve`, the options are passed from the `resolve` key of your webpack configuration e.g.:\n\n```\nresolve: {\n  extensions: ['', '.js', '.jsx'],\n  modules: ['src', 'node_modules'],\n  plugins: [new DirectoryNamedWebpackPlugin()]\n  ...\n},\n```\n\n## License\n\nCopyright (c) 2012-2016 Tobias Koppers\n\nMIT (http://www.opensource.org/licenses/mit-license.php)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/webpack/enhanced-resolve.git"
  },
  "scripts": {
    "cover": "istanbul cover node_modules/mocha/bin/_mocha",
    "lint": "eslint lib test",
    "precover": "yarn lint",
    "pretest": "yarn lint",
    "pretty": "prettier --loglevel warn --write \"{lib,test}/**/*.{js,json}\"",
    "test": "mocha --full-trace --check-leaks",
    "travis": "yarn cover --report lcovonly"
  },
  "version": "4.2.0"
}
